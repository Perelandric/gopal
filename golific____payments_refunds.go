/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package gopal

import (
	"Golific/gJson"
	"encoding/json"
	"strings"
)

/*****************************

Refund struct

******************************/

// State items are: pending; completed; failed
type Refund struct {
	private private_th7ljxjo7uzk
	_shared
	Description string `json:"description,omitempty"`
	Reason      string `json:"reason,omitempty"`
}

type private_th7ljxjo7uzk struct {
	Amount    amount `json:"amount"`
	SaleId    string `json:"sale_id,omitempty"`
	CaptureId string `json:"capture_id,omitempty"`
}

// JSONEncode implements part of Golific's JSONEncodable interface.
func (self *private_th7ljxjo7uzk) JSONEncode(encoder *gJson.Encoder) {
	var first = true
	encoder.EncodeKeyVal("amount", self.Amount, first)
	first = false

	if len(self.SaleId) != 0 {
		encoder.EncodeKeyVal("sale_id", self.SaleId, first)
		first = false
	}

	if len(self.CaptureId) != 0 {
		encoder.EncodeKeyVal("capture_id", self.CaptureId, first)
		first = false
	}
}

type json_th7ljxjo7uzk struct {
	*private_th7ljxjo7uzk
	_shared
	Description string `json:"description,omitempty"`
	Reason      string `json:"reason,omitempty"`
}

func (self *Refund) Amount() amount {
	return self.private.Amount
}

func (self *Refund) SaleId() string {
	return self.private.SaleId
}

func (self *Refund) CaptureId() string {
	return self.private.CaptureId
}

// JSONEncode implements part of Golific's JSONEncodable interface.
func (self *Refund) JSONEncode(encoder *gJson.Encoder) {
	encoder.WriteRawByte('{')

	var startPos = encoder.Len()

	// Encodes only the fields of the struct, without curly braces
	self.private.JSONEncode(encoder)

	var first = encoder.Len() == startPos

	if je, ok := interface{}(self._shared).(gJson.JSONEncodable); ok {
		first = encoder.EmbedEncodedStruct(je, first)
	} else {
		first = encoder.EmbedMarshaledStruct(self._shared, first)
	}

	if len(self.Description) != 0 {
		encoder.EncodeKeyVal("description", self.Description, first)
		first = false
	}

	if len(self.Reason) != 0 {
		encoder.EncodeKeyVal("reason", self.Reason, first)
		first = false
	}
	encoder.WriteRawByte('}')
}

func (self *Refund) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_th7ljxjo7uzk{
		&self.private,
		self._shared,
		self.Description,
		self.Reason,
	})
}

func (self *Refund) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// JSON key comparisons are case-insensitive
	for k, v := range m {
		m[strings.ToLower(k)] = v
	}

	var data json.RawMessage
	var ok bool
	if data, ok = m["amount"]; ok {
		if err = json.Unmarshal(data, &self.private.Amount); err != nil {
			return err
		}
	}

	if data, ok = m["description"]; ok {
		if err = json.Unmarshal(data, &self.Description); err != nil {
			return err
		}
	}

	if data, ok = m["reason"]; ok {
		if err = json.Unmarshal(data, &self.Reason); err != nil {
			return err
		}
	}

	if data, ok = m["sale_id"]; ok {
		if err = json.Unmarshal(data, &self.private.SaleId); err != nil {
			return err
		}
	}

	if data, ok = m["capture_id"]; ok {
		if err = json.Unmarshal(data, &self.private.CaptureId); err != nil {
			return err
		}
	}
	return nil
}
