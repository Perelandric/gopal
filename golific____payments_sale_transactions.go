/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package gopal

import (
	"Golific/gJson"
	"encoding/json"
	"strings"
)

/*****************************

Sale struct

******************************/

// State values are: pending; completed; refunded; partially_refunded
// TODO: PendingReason appears in the old docs under the general Sale object description
// but not under the lower "sale object" definition. The new docs have it
// marked as [DEPRECATED] in one area, but not another.
type Sale struct {
	private private_pn8law5ao4zc
	_shared
	Description      string   `json:"description,omitempty"`
	TransactionFee   currency `json:"transaction_fee"`
	ReceivableAmount currency `json:"receivable_amount"`
}

type private_pn8law5ao4zc struct {
	Amount                    amount                 `json:"amount"`
	PendingReason             pendingReasonEnum      `json:"pending_reason"`
	PaymentMode               paymentModeEnum        `json:"payment_mode"`
	ExchangeRate              string                 `json:"exchange_rate"`
	FmfDetails                fmfDetails             `json:"fmf_details"`
	ReceiptId                 string                 `json:"receipt_id"`
	ReasonCode                reasonCodeEnum         `json:"reason_code"`
	ProtectionEligibility     protectionEligEnum     `json:"protection_eligibility"`
	ProtectionEligibilityType protectionEligTypeEnum `json:"protection_eligibility_type"`
	ClearingTime              string                 `json:"clearing_time"`
	BillingAgreementId        string                 `json:"billing_agreement_id"`
}

// JSONEncode implements part of Golific's JSONEncodable interface.
func (self *private_pn8law5ao4zc) JSONEncode(encoder *gJson.Encoder) {
	var first = true
	encoder.EncodeKeyVal("amount", self.Amount, first)
	first = false

	encoder.EncodeKeyVal("pending_reason", self.PendingReason, first)
	first = false

	encoder.EncodeKeyVal("payment_mode", self.PaymentMode, first)
	first = false

	encoder.EncodeKeyVal("exchange_rate", self.ExchangeRate, first)
	first = false

	encoder.EncodeKeyVal("fmf_details", self.FmfDetails, first)
	first = false

	encoder.EncodeKeyVal("receipt_id", self.ReceiptId, first)
	first = false

	encoder.EncodeKeyVal("reason_code", self.ReasonCode, first)
	first = false

	encoder.EncodeKeyVal("protection_eligibility", self.ProtectionEligibility, first)
	first = false

	encoder.EncodeKeyVal("protection_eligibility_type", self.ProtectionEligibilityType, first)
	first = false

	encoder.EncodeKeyVal("clearing_time", self.ClearingTime, first)
	first = false

	encoder.EncodeKeyVal("billing_agreement_id", self.BillingAgreementId, first)
	first = false
}

type json_pn8law5ao4zc struct {
	*private_pn8law5ao4zc
	_shared
	Description      string   `json:"description,omitempty"`
	TransactionFee   currency `json:"transaction_fee"`
	ReceivableAmount currency `json:"receivable_amount"`
}

func (self *Sale) Amount() amount {
	return self.private.Amount
}

func (self *Sale) PendingReason() pendingReasonEnum {
	return self.private.PendingReason
}

func (self *Sale) PaymentMode() paymentModeEnum {
	return self.private.PaymentMode
}

func (self *Sale) ExchangeRate() string {
	return self.private.ExchangeRate
}

func (self *Sale) FmfDetails() fmfDetails {
	return self.private.FmfDetails
}

func (self *Sale) ReceiptId() string {
	return self.private.ReceiptId
}

func (self *Sale) ReasonCode() reasonCodeEnum {
	return self.private.ReasonCode
}

func (self *Sale) ProtectionEligibility() protectionEligEnum {
	return self.private.ProtectionEligibility
}

func (self *Sale) ProtectionEligibilityType() protectionEligTypeEnum {
	return self.private.ProtectionEligibilityType
}

func (self *Sale) ClearingTime() string {
	return self.private.ClearingTime
}

func (self *Sale) BillingAgreementId() string {
	return self.private.BillingAgreementId
}

// JSONEncode implements part of Golific's JSONEncodable interface.
func (self *Sale) JSONEncode(encoder *gJson.Encoder) {
	encoder.WriteRawByte('{')

	var startPos = encoder.Len()

	// Encodes only the fields of the struct, without curly braces
	self.private.JSONEncode(encoder)

	var first = encoder.Len() == startPos

	if je, ok := interface{}(self._shared).(gJson.JSONEncodable); ok {
		first = encoder.EmbedEncodedStruct(je, first)
	} else {
		first = encoder.EmbedMarshaledStruct(self._shared, first)
	}

	if len(self.Description) != 0 {
		encoder.EncodeKeyVal("description", self.Description, first)
		first = false
	}

	encoder.EncodeKeyVal("transaction_fee", self.TransactionFee, first)
	first = false

	encoder.EncodeKeyVal("receivable_amount", self.ReceivableAmount, first)
	first = false
	encoder.WriteRawByte('}')
}

func (self *Sale) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_pn8law5ao4zc{
		&self.private,
		self._shared,
		self.Description,
		self.TransactionFee,
		self.ReceivableAmount,
	})
}

func (self *Sale) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// JSON key comparisons are case-insensitive
	for k, v := range m {
		m[strings.ToLower(k)] = v
	}

	var data json.RawMessage
	var ok bool
	if data, ok = m["amount"]; ok {
		if err = json.Unmarshal(data, &self.private.Amount); err != nil {
			return err
		}
	}

	if data, ok = m["description"]; ok {
		if err = json.Unmarshal(data, &self.Description); err != nil {
			return err
		}
	}

	if data, ok = m["transaction_fee"]; ok {
		if err = json.Unmarshal(data, &self.TransactionFee); err != nil {
			return err
		}
	}

	if data, ok = m["receivable_amount"]; ok {
		if err = json.Unmarshal(data, &self.ReceivableAmount); err != nil {
			return err
		}
	}

	if data, ok = m["pending_reason"]; ok {
		if err = json.Unmarshal(data, &self.private.PendingReason); err != nil {
			return err
		}
	}

	if data, ok = m["payment_mode"]; ok {
		if err = json.Unmarshal(data, &self.private.PaymentMode); err != nil {
			return err
		}
	}

	if data, ok = m["exchange_rate"]; ok {
		if err = json.Unmarshal(data, &self.private.ExchangeRate); err != nil {
			return err
		}
	}

	if data, ok = m["fmf_details"]; ok {
		if err = json.Unmarshal(data, &self.private.FmfDetails); err != nil {
			return err
		}
	}

	if data, ok = m["receipt_id"]; ok {
		if err = json.Unmarshal(data, &self.private.ReceiptId); err != nil {
			return err
		}
	}

	if data, ok = m["reason_code"]; ok {
		if err = json.Unmarshal(data, &self.private.ReasonCode); err != nil {
			return err
		}
	}

	if data, ok = m["protection_eligibility"]; ok {
		if err = json.Unmarshal(data, &self.private.ProtectionEligibility); err != nil {
			return err
		}
	}

	if data, ok = m["protection_eligibility_type"]; ok {
		if err = json.Unmarshal(data, &self.private.ProtectionEligibilityType); err != nil {
			return err
		}
	}

	if data, ok = m["clearing_time"]; ok {
		if err = json.Unmarshal(data, &self.private.ClearingTime); err != nil {
			return err
		}
	}

	if data, ok = m["billing_agreement_id"]; ok {
		if err = json.Unmarshal(data, &self.private.BillingAgreementId); err != nil {
			return err
		}
	}
	return nil
}
