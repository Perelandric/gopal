/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package gopal

import (
	"Golific/gJson"
	"encoding/json"
	"strings"
)

/*****************************

Capture struct

******************************/

// State values are: pending, completed, refunded, partially_refunded
type Capture struct {
	private private_ievo6wy1il2e
	_shared
	TransactionFee currency `json:"transaction_fee"`
	IsFinalCapture bool     `json:"is_final_capture,omitempty"`
}

type private_ievo6wy1il2e struct {
	Amount amount `json:"amount"`
}

// JSONEncode implements part of Golific's JSONEncodable interface.
func (self *private_ievo6wy1il2e) JSONEncode(encoder *gJson.Encoder) {
	var first = true
	encoder.EncodeKeyVal("amount", self.Amount, first)
	first = false
}

type json_ievo6wy1il2e struct {
	*private_ievo6wy1il2e
	_shared
	TransactionFee currency `json:"transaction_fee"`
	IsFinalCapture bool     `json:"is_final_capture,omitempty"`
}

func (self *Capture) Amount() amount {
	return self.private.Amount
}

// JSONEncode implements part of Golific's JSONEncodable interface.
func (self *Capture) JSONEncode(encoder *gJson.Encoder) {
	encoder.WriteRawByte('{')

	var startPos = encoder.Len()

	// Encodes only the fields of the struct, without curly braces
	self.private.JSONEncode(encoder)

	var first = encoder.Len() == startPos

	if je, ok := interface{}(self._shared).(gJson.JSONEncodable); ok {
		first = encoder.EmbedEncodedStruct(je, first)
	} else {
		first = encoder.EmbedMarshaledStruct(self._shared, first)
	}

	encoder.EncodeKeyVal("transaction_fee", self.TransactionFee, first)
	first = false

	if !self.IsFinalCapture {
		encoder.EncodeKeyVal("is_final_capture", self.IsFinalCapture, first)
		first = false
	}
	encoder.WriteRawByte('}')
}

func (self *Capture) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_ievo6wy1il2e{
		&self.private,
		self._shared,
		self.TransactionFee,
		self.IsFinalCapture,
	})
}

func (self *Capture) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// JSON key comparisons are case-insensitive
	for k, v := range m {
		m[strings.ToLower(k)] = v
	}

	var data json.RawMessage
	var ok bool
	if data, ok = m["amount"]; ok {
		if err = json.Unmarshal(data, &self.private.Amount); err != nil {
			return err
		}
	}

	if data, ok = m["transaction_fee"]; ok {
		if err = json.Unmarshal(data, &self.TransactionFee); err != nil {
			return err
		}
	}

	if data, ok = m["is_final_capture"]; ok {
		if err = json.Unmarshal(data, &self.IsFinalCapture); err != nil {
			return err
		}
	}
	return nil
}
