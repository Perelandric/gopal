/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package gopal

import (
	"encoding/json"
)

/*****************************

Payment struct

******************************/
func NewPayment() *Payment {
	return &Payment{
		private: private_18ddwobzobasi{},
	}
}

// TODO: Add `billing_agreement_tokens`, `payment_instruction`
type Payment struct {
	private private_18ddwobzobasi
	*connection
	ExperienceProfileId string `json:"experience_profile_id"`
	*payment_error
}

type private_18ddwobzobasi struct {
	Intent        intentEnum        `json:"intent,omitempty"`
	Payer         payer             `json:"payer,omitempty"`
	Transactions  Transactions      `json:"transactions,omitempty"`
	RedirectUrls  Redirects         `json:"redirect_urls,omitempty"`
	State         stateEnum         `json:"state,omitempty"`
	Id            string            `json:"id,omitempty"`
	FailureReason FailureReasonEnum `json:"failure_reason,omitempty"`
	CreateTime    dateTime          `json:"create_time,omitempty"`
	UpdateTime    dateTime          `json:"update_time,omitempty"`
	Links         links             `json:"links,omitempty"`
}

type json_18ddwobzobasi struct {
	*private_18ddwobzobasi
	*connection
	ExperienceProfileId string `json:"experience_profile_id"`
	*payment_error
}

func (self *Payment) Intent() intentEnum {
	return self.private.Intent
}

func (self *Payment) Payer() payer {
	return self.private.Payer
}

func (self *Payment) Transactions() Transactions {
	return self.private.Transactions
}

func (self *Payment) RedirectUrls() Redirects {
	return self.private.RedirectUrls
}

func (self *Payment) State() stateEnum {
	return self.private.State
}

func (self *Payment) Id() string {
	return self.private.Id
}

func (self *Payment) FailureReason() FailureReasonEnum {
	return self.private.FailureReason
}

func (self *Payment) CreateTime() dateTime {
	return self.private.CreateTime
}

func (self *Payment) UpdateTime() dateTime {
	return self.private.UpdateTime
}

func (self *Payment) Links() links {
	return self.private.Links
}

func (self *Payment) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_18ddwobzobasi{
		&self.private,
		self.connection,
		self.ExperienceProfileId,
		self.payment_error,
	})
}

func (self *Payment) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "experience_profile_id":
			err = json.Unmarshal(rawMsg, &self.ExperienceProfileId)
		case "intent":
			err = json.Unmarshal(rawMsg, &self.private.Intent)
		case "payer":
			err = json.Unmarshal(rawMsg, &self.private.Payer)
		case "transactions":
			err = json.Unmarshal(rawMsg, &self.private.Transactions)
		case "redirect_urls":
			err = json.Unmarshal(rawMsg, &self.private.RedirectUrls)
		case "state":
			err = json.Unmarshal(rawMsg, &self.private.State)
		case "id":
			err = json.Unmarshal(rawMsg, &self.private.Id)
		case "failure_reason":
			err = json.Unmarshal(rawMsg, &self.private.FailureReason)
		case "create_time":
			err = json.Unmarshal(rawMsg, &self.private.CreateTime)
		case "update_time":
			err = json.Unmarshal(rawMsg, &self.private.UpdateTime)
		case "links":
			err = json.Unmarshal(rawMsg, &self.private.Links)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

Transaction struct

******************************/
func NewTransaction() *Transaction {
	return &Transaction{
		private: private_1r1ip1dr1az4u{},
	}
}

type Transaction struct {
	private        private_1r1ip1dr1az4u
	Description    string         `json:"description,omitempty"`
	InvoiceNumber  string         `json:"invoice_number,omitempty"`
	Custom         string         `json:"custom,omitempty"`
	SoftDescriptor string         `json:"soft_descriptor,omitempty"`
	PaymentOptions paymentOptions `json:"payment_options,omitempty"`
}

type private_1r1ip1dr1az4u struct {
	ItemList         *itemList        `json:"item_list,omitempty"`
	Amount           amount           `json:"amount"`
	RelatedResources relatedResources `json:"related_resources,omitempty"`
}

type json_1r1ip1dr1az4u struct {
	*private_1r1ip1dr1az4u
	Description    string         `json:"description,omitempty"`
	InvoiceNumber  string         `json:"invoice_number,omitempty"`
	Custom         string         `json:"custom,omitempty"`
	SoftDescriptor string         `json:"soft_descriptor,omitempty"`
	PaymentOptions paymentOptions `json:"payment_options,omitempty"`
}

func (self *Transaction) ItemList() *itemList {
	return self.private.ItemList
}

func (self *Transaction) Amount() amount {
	return self.private.Amount
}

func (self *Transaction) RelatedResources() relatedResources {
	return self.private.RelatedResources
}

func (self *Transaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1r1ip1dr1az4u{
		&self.private,
		self.Description,
		self.InvoiceNumber,
		self.Custom,
		self.SoftDescriptor,
		self.PaymentOptions,
	})
}

func (self *Transaction) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "item_list":
			err = json.Unmarshal(rawMsg, &self.private.ItemList)
		case "amount":
			err = json.Unmarshal(rawMsg, &self.private.Amount)
		case "related_resources":
			err = json.Unmarshal(rawMsg, &self.private.RelatedResources)
		case "description":
			err = json.Unmarshal(rawMsg, &self.Description)
		case "invoice_number":
			err = json.Unmarshal(rawMsg, &self.InvoiceNumber)
		case "custom":
			err = json.Unmarshal(rawMsg, &self.Custom)
		case "soft_descriptor":
			err = json.Unmarshal(rawMsg, &self.SoftDescriptor)
		case "payment_options":
			err = json.Unmarshal(rawMsg, &self.PaymentOptions)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

itemList struct

******************************/
func NewItemList() *itemList {
	return &itemList{
		private: private_1ooercgh7cr5y{},
	}
}

type itemList struct {
	private private_1ooercgh7cr5y
}

type private_1ooercgh7cr5y struct {
	Items           Items            `json:"items,omitempty"`
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

type json_1ooercgh7cr5y struct {
	*private_1ooercgh7cr5y
}

func (self *itemList) Items() Items {
	return self.private.Items
}

func (self *itemList) ShippingAddress() *ShippingAddress {
	return self.private.ShippingAddress
}

func (self *itemList) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1ooercgh7cr5y{
		&self.private,
	})
}

func (self *itemList) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "items":
			err = json.Unmarshal(rawMsg, &self.private.Items)
		case "shipping_address":
			err = json.Unmarshal(rawMsg, &self.private.ShippingAddress)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

Item struct

******************************/
func NewItem() *Item {
	return &Item{
		private: private_3tmzaz57qcq5{},
	}
}

type Item struct {
	private     private_3tmzaz57qcq5
	Quantity    int64   `json:"quantity,string"`
	Name        string  `json:"name"`
	Price       float64 `json:"price,string"`
	Tax         float64 `json:"tax,omitempty"`
	Sku         string  `json:"sku,omitempty"`
	Description string  `json:"description,omitempty"`
}

type private_3tmzaz57qcq5 struct {
	Currency CurrencyTypeEnum `json:"currency"`
}

type json_3tmzaz57qcq5 struct {
	*private_3tmzaz57qcq5
	Quantity    int64   `json:"quantity,string"`
	Name        string  `json:"name"`
	Price       float64 `json:"price,string"`
	Tax         float64 `json:"tax,omitempty"`
	Sku         string  `json:"sku,omitempty"`
	Description string  `json:"description,omitempty"`
}

func (self *Item) Currency() CurrencyTypeEnum {
	return self.private.Currency
}

func (self *Item) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_3tmzaz57qcq5{
		&self.private,
		self.Quantity,
		self.Name,
		self.Price,
		self.Tax,
		self.Sku,
		self.Description,
	})
}

func (self *Item) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "currency":
			err = json.Unmarshal(rawMsg, &self.private.Currency)
		case "quantity":
			err = json.Unmarshal(rawMsg, &self.Quantity)
		case "name":
			err = json.Unmarshal(rawMsg, &self.Name)
		case "price":
			err = json.Unmarshal(rawMsg, &self.Price)
		case "tax":
			err = json.Unmarshal(rawMsg, &self.Tax)
		case "sku":
			err = json.Unmarshal(rawMsg, &self.Sku)
		case "description":
			err = json.Unmarshal(rawMsg, &self.Description)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

_shared struct

******************************/

type _shared struct {
	private private_13eeqv072lmtm
	*connection
	*identity_error
}

type private_13eeqv072lmtm struct {
	Id            string    `json:"id,omitempty"`
	CreateTime    dateTime  `json:"create_time,omitempty"`
	UpdateTime    dateTime  `json:"update_time,omitempty"`
	State         stateEnum `json:"state,omitempty"`
	ParentPayment string    `json:"parent_payment,omitempty"`
	Links         links     `json:"links,omitempty"`
}

type json_13eeqv072lmtm struct {
	*private_13eeqv072lmtm
	*connection
	*identity_error
}

func (self *_shared) Id() string {
	return self.private.Id
}

func (self *_shared) CreateTime() dateTime {
	return self.private.CreateTime
}

func (self *_shared) UpdateTime() dateTime {
	return self.private.UpdateTime
}

func (self *_shared) State() stateEnum {
	return self.private.State
}

func (self *_shared) ParentPayment() string {
	return self.private.ParentPayment
}

func (self *_shared) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_13eeqv072lmtm{
		&self.private,
		self.connection,
		self.identity_error,
	})
}

func (self *_shared) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "id":
			err = json.Unmarshal(rawMsg, &self.private.Id)
		case "create_time":
			err = json.Unmarshal(rawMsg, &self.private.CreateTime)
		case "update_time":
			err = json.Unmarshal(rawMsg, &self.private.UpdateTime)
		case "state":
			err = json.Unmarshal(rawMsg, &self.private.State)
		case "parent_payment":
			err = json.Unmarshal(rawMsg, &self.private.ParentPayment)
		case "links":
			err = json.Unmarshal(rawMsg, &self.private.Links)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

Authorization struct

******************************/

// State items are: pending, authorized, captured, partially_captured, expired,
// voided
type Authorization struct {
	private private_1pm2mnwlff92d
	_shared
}

type private_1pm2mnwlff92d struct {
	Amount             amount                 `json:"amount"`
	BillingAgreementId string                 `json:"billing_agreement_id"`
	PaymentMode        paymentModeEnum        `json:"payment_mode"`
	ReasonCode         reasonCodeEnum         `json:"reason_code"`
	ValidUntil         dateTime               `json:"valid_until"`
	ClearingTime       string                 `json:"clearing_time"`
	ProtectionElig     protectionEligEnum     `json:"protection_eligibility"`
	ProtectionEligType protectionEligTypeEnum `json:"protection_eligibility_type"`
	FmfDetails         fmfDetails             `json:"fmf_details"`
}

type json_1pm2mnwlff92d struct {
	*private_1pm2mnwlff92d
	_shared
}

func (self *Authorization) Amount() amount {
	return self.private.Amount
}

func (self *Authorization) BillingAgreementId() string {
	return self.private.BillingAgreementId
}

func (self *Authorization) PaymentMode() paymentModeEnum {
	return self.private.PaymentMode
}

func (self *Authorization) ReasonCode() reasonCodeEnum {
	return self.private.ReasonCode
}

func (self *Authorization) ValidUntil() dateTime {
	return self.private.ValidUntil
}

func (self *Authorization) ClearingTime() string {
	return self.private.ClearingTime
}

func (self *Authorization) ProtectionElig() protectionEligEnum {
	return self.private.ProtectionElig
}

func (self *Authorization) ProtectionEligType() protectionEligTypeEnum {
	return self.private.ProtectionEligType
}

func (self *Authorization) FmfDetails() fmfDetails {
	return self.private.FmfDetails
}

func (self *Authorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1pm2mnwlff92d{
		&self.private,
		self._shared,
	})
}

func (self *Authorization) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "amount":
			err = json.Unmarshal(rawMsg, &self.private.Amount)
		case "billing_agreement_id":
			err = json.Unmarshal(rawMsg, &self.private.BillingAgreementId)
		case "payment_mode":
			err = json.Unmarshal(rawMsg, &self.private.PaymentMode)
		case "reason_code":
			err = json.Unmarshal(rawMsg, &self.private.ReasonCode)
		case "valid_until":
			err = json.Unmarshal(rawMsg, &self.private.ValidUntil)
		case "clearing_time":
			err = json.Unmarshal(rawMsg, &self.private.ClearingTime)
		case "protection_eligibility":
			err = json.Unmarshal(rawMsg, &self.private.ProtectionElig)
		case "protection_eligibility_type":
			err = json.Unmarshal(rawMsg, &self.private.ProtectionEligType)
		case "fmf_details":
			err = json.Unmarshal(rawMsg, &self.private.FmfDetails)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

Capture struct

******************************/
func NewCapture() *Capture {
	return &Capture{
		private: private_3yw2okw113nm{},
	}
}

// State values are: pending, completed, refunded, partially_refunded
type Capture struct {
	private private_3yw2okw113nm
	_shared
	TransactionFee currency `json:"transaction_fee"`
	IsFinalCapture bool     `json:"is_final_capture,omitempty"`
}

type private_3yw2okw113nm struct {
	Amount amount `json:"amount"`
}

type json_3yw2okw113nm struct {
	*private_3yw2okw113nm
	_shared
	TransactionFee currency `json:"transaction_fee"`
	IsFinalCapture bool     `json:"is_final_capture,omitempty"`
}

func (self *Capture) Amount() amount {
	return self.private.Amount
}

func (self *Capture) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_3yw2okw113nm{
		&self.private,
		self._shared,
		self.TransactionFee,
		self.IsFinalCapture,
	})
}

func (self *Capture) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "amount":
			err = json.Unmarshal(rawMsg, &self.private.Amount)
		case "transaction_fee":
			err = json.Unmarshal(rawMsg, &self.TransactionFee)
		case "is_final_capture":
			err = json.Unmarshal(rawMsg, &self.IsFinalCapture)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

Sale struct

******************************/
func NewSale() *Sale {
	return &Sale{
		private: private_15n21swciwfwr{},
	}
}

// State values are: pending; completed; refunded; partially_refunded
// TODO: PendingReason appears in the old docs under the general Sale object description
// but not under the lower "sale object" definition. The new docs have it
// marked as [DEPRECATED] in one area, but not another.
type Sale struct {
	private private_15n21swciwfwr
	_shared
	Description      string   `json:"description,omitempty"`
	TransactionFee   currency `json:"transaction_fee"`
	ReceivableAmount currency `json:"receivable_amount"`
}

type private_15n21swciwfwr struct {
	Amount                    amount                 `json:"amount"`
	PendingReason             pendingReasonEnum      `json:"pending_reason"`
	PaymentMode               paymentModeEnum        `json:"payment_mode"`
	ExchangeRate              string                 `json:"exchange_rate"`
	FmfDetails                fmfDetails             `json:"fmf_details"`
	ReceiptId                 string                 `json:"receipt_id"`
	ReasonCode                reasonCodeEnum         `json:"reason_code"`
	ProtectionEligibility     protectionEligEnum     `json:"protection_eligibility"`
	ProtectionEligibilityType protectionEligTypeEnum `json:"protection_eligibility_type"`
	ClearingTime              string                 `json:"clearing_time"`
	BillingAgreementId        string                 `json:"billing_agreement_id"`
}

type json_15n21swciwfwr struct {
	*private_15n21swciwfwr
	_shared
	Description      string   `json:"description,omitempty"`
	TransactionFee   currency `json:"transaction_fee"`
	ReceivableAmount currency `json:"receivable_amount"`
}

func (self *Sale) Amount() amount {
	return self.private.Amount
}

func (self *Sale) PendingReason() pendingReasonEnum {
	return self.private.PendingReason
}

func (self *Sale) PaymentMode() paymentModeEnum {
	return self.private.PaymentMode
}

func (self *Sale) ExchangeRate() string {
	return self.private.ExchangeRate
}

func (self *Sale) FmfDetails() fmfDetails {
	return self.private.FmfDetails
}

func (self *Sale) ReceiptId() string {
	return self.private.ReceiptId
}

func (self *Sale) ReasonCode() reasonCodeEnum {
	return self.private.ReasonCode
}

func (self *Sale) ProtectionEligibility() protectionEligEnum {
	return self.private.ProtectionEligibility
}

func (self *Sale) ProtectionEligibilityType() protectionEligTypeEnum {
	return self.private.ProtectionEligibilityType
}

func (self *Sale) ClearingTime() string {
	return self.private.ClearingTime
}

func (self *Sale) BillingAgreementId() string {
	return self.private.BillingAgreementId
}

func (self *Sale) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_15n21swciwfwr{
		&self.private,
		self._shared,
		self.Description,
		self.TransactionFee,
		self.ReceivableAmount,
	})
}

func (self *Sale) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "amount":
			err = json.Unmarshal(rawMsg, &self.private.Amount)
		case "description":
			err = json.Unmarshal(rawMsg, &self.Description)
		case "transaction_fee":
			err = json.Unmarshal(rawMsg, &self.TransactionFee)
		case "receivable_amount":
			err = json.Unmarshal(rawMsg, &self.ReceivableAmount)
		case "pending_reason":
			err = json.Unmarshal(rawMsg, &self.private.PendingReason)
		case "payment_mode":
			err = json.Unmarshal(rawMsg, &self.private.PaymentMode)
		case "exchange_rate":
			err = json.Unmarshal(rawMsg, &self.private.ExchangeRate)
		case "fmf_details":
			err = json.Unmarshal(rawMsg, &self.private.FmfDetails)
		case "receipt_id":
			err = json.Unmarshal(rawMsg, &self.private.ReceiptId)
		case "reason_code":
			err = json.Unmarshal(rawMsg, &self.private.ReasonCode)
		case "protection_eligibility":
			err = json.Unmarshal(rawMsg, &self.private.ProtectionEligibility)
		case "protection_eligibility_type":
			err = json.Unmarshal(rawMsg, &self.private.ProtectionEligibilityType)
		case "clearing_time":
			err = json.Unmarshal(rawMsg, &self.private.ClearingTime)
		case "billing_agreement_id":
			err = json.Unmarshal(rawMsg, &self.private.BillingAgreementId)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

Refund struct

******************************/
func NewRefund() *Refund {
	return &Refund{
		private: private_1ldds0vs1j21f{},
	}
}

// State items are: pending; completed; failed
type Refund struct {
	private private_1ldds0vs1j21f
	_shared
	Description string `json:"description,omitempty"`
	Reason      string `json:"reason,omitempty"`
}

type private_1ldds0vs1j21f struct {
	Amount    amount `json:"amount"`
	SaleId    string `json:"sale_id,omitempty"`
	CaptureId string `json:"capture_id,omitempty"`
}

type json_1ldds0vs1j21f struct {
	*private_1ldds0vs1j21f
	_shared
	Description string `json:"description,omitempty"`
	Reason      string `json:"reason,omitempty"`
}

func (self *Refund) Amount() amount {
	return self.private.Amount
}

func (self *Refund) SaleId() string {
	return self.private.SaleId
}

func (self *Refund) CaptureId() string {
	return self.private.CaptureId
}

func (self *Refund) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1ldds0vs1j21f{
		&self.private,
		self._shared,
		self.Description,
		self.Reason,
	})
}

func (self *Refund) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "amount":
			err = json.Unmarshal(rawMsg, &self.private.Amount)
		case "description":
			err = json.Unmarshal(rawMsg, &self.Description)
		case "reason":
			err = json.Unmarshal(rawMsg, &self.Reason)
		case "sale_id":
			err = json.Unmarshal(rawMsg, &self.private.SaleId)
		case "capture_id":
			err = json.Unmarshal(rawMsg, &self.private.CaptureId)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

amount struct

******************************/
func NewAmount() *amount {
	return &amount{
		private: private_ldo1a2xgbw98{},
	}
}

// Amount Object
// A`Transaction` object also may have an `ItemList`, which has dollar amounts.
// These amounts are used to calculate the `Total` field of the `Amount` object
//
// All other uses of `Amount` do have `shipping`, `shipping_discount` and
// `subtotal` to calculate the `Total`.
type amount struct {
	private private_ldo1a2xgbw98
	Details *details `json:"details,omitempty"`
}

type private_ldo1a2xgbw98 struct {
	Currency CurrencyTypeEnum `json:"currency"`
	Total    float64          `json:"total"`
}

type json_ldo1a2xgbw98 struct {
	*private_ldo1a2xgbw98
	Details *details `json:"details,omitempty"`
}

func (self *amount) Currency() CurrencyTypeEnum {
	return self.private.Currency
}

func (self *amount) Total() float64 {
	return self.private.Total
}

func (self *amount) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_ldo1a2xgbw98{
		&self.private,
		self.Details,
	})
}

func (self *amount) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "currency":
			err = json.Unmarshal(rawMsg, &self.private.Currency)
		case "total":
			err = json.Unmarshal(rawMsg, &self.private.Total)
		case "details":
			err = json.Unmarshal(rawMsg, &self.Details)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

details struct

******************************/
func NewDetails() *details {
	return &details{
		private: private_o1w0p2cfookq{},
	}
}

type details struct {
	private private_o1w0p2cfookq
	// Amount charged for shipping. 10 chars max, with support for 2 decimal places
	Shipping float64 `json:"shipping,omitempty"`
	// Amount of the subtotal of the items. REQUIRED if line items are specified.
	// 10 chars max, with support for 2 decimal places
	Subtotal float64 `json:"subtotal,omitempty"`
	// Amount charged for tax. 10 chars max, with support for 2 decimal places
	Tax float64 `json:"tax,omitempty"`
	// Amount being charged for handling fee. When `payment_method` is `paypal`
	HandlingFee float64 `json:"handling_fee,omitempty"`
	// Amount being charged for insurance fee. When `payment_method` is `paypal`
	Insurance float64 `json:"insurance,omitempty"`
	// Amount being discounted for shipping fee. When `payment_method` is `paypal`
	ShippingDiscount float64 `json:"shipping_discount,omitempty"`
}

type private_o1w0p2cfookq struct{}

type json_o1w0p2cfookq struct {
	*private_o1w0p2cfookq
	Shipping         float64 `json:"shipping,omitempty"`
	Subtotal         float64 `json:"subtotal,omitempty"`
	Tax              float64 `json:"tax,omitempty"`
	HandlingFee      float64 `json:"handling_fee,omitempty"`
	Insurance        float64 `json:"insurance,omitempty"`
	ShippingDiscount float64 `json:"shipping_discount,omitempty"`
}

func (self *details) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_o1w0p2cfookq{
		&self.private,
		self.Shipping,
		self.Subtotal,
		self.Tax,
		self.HandlingFee,
		self.Insurance,
		self.ShippingDiscount,
	})
}

func (self *details) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "shipping":
			err = json.Unmarshal(rawMsg, &self.Shipping)
		case "subtotal":
			err = json.Unmarshal(rawMsg, &self.Subtotal)
		case "tax":
			err = json.Unmarshal(rawMsg, &self.Tax)
		case "handling_fee":
			err = json.Unmarshal(rawMsg, &self.HandlingFee)
		case "insurance":
			err = json.Unmarshal(rawMsg, &self.Insurance)
		case "shipping_discount":
			err = json.Unmarshal(rawMsg, &self.ShippingDiscount)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

link struct

******************************/
func NewLink() *link {
	return &link{
		private: private_168qtqwobuvz6{},
	}
}

type link struct {
	private private_168qtqwobuvz6
}

type private_168qtqwobuvz6 struct {
	Href   string      `json:"href,omitempty"`
	Rel    relTypeEnum `json:"rel,omitempty"`
	Method string      `json:"method,omitempty"`
}

type json_168qtqwobuvz6 struct {
	*private_168qtqwobuvz6
}

func (self *link) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_168qtqwobuvz6{
		&self.private,
	})
}

func (self *link) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "href":
			err = json.Unmarshal(rawMsg, &self.private.Href)
		case "rel":
			err = json.Unmarshal(rawMsg, &self.private.Rel)
		case "method":
			err = json.Unmarshal(rawMsg, &self.private.Method)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

currency struct

******************************/
func NewCurrency() *currency {
	return &currency{
		private: private_c08gnrfs6odz{},
	}
}

// Base object for all financial value related fields (balance, payment due, etc.)
type currency struct {
	private  private_c08gnrfs6odz
	Currency string `json:"currency"`
	Value    string `json:"value"`
}

type private_c08gnrfs6odz struct{}

type json_c08gnrfs6odz struct {
	*private_c08gnrfs6odz
	Currency string `json:"currency"`
	Value    string `json:"value"`
}

func (self *currency) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_c08gnrfs6odz{
		&self.private,
		self.Currency,
		self.Value,
	})
}

func (self *currency) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "currency":
			err = json.Unmarshal(rawMsg, &self.Currency)
		case "value":
			err = json.Unmarshal(rawMsg, &self.Value)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

fmfDetails struct

******************************/
func NewFmfDetails() *fmfDetails {
	return &fmfDetails{
		private: private_1gcgcxu7k0krt{},
	}
}

// This object represents Fraud Management Filter (FMF) details for a payment.
type fmfDetails struct {
	private private_1gcgcxu7k0krt
}

type private_1gcgcxu7k0krt struct {
	FilterType  fmfFilterEnum `json:"filter_type"`
	FilterID    filterIdEnum  `json:"filter_id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
}

type json_1gcgcxu7k0krt struct {
	*private_1gcgcxu7k0krt
}

func (self *fmfDetails) FilterType() fmfFilterEnum {
	return self.private.FilterType
}

func (self *fmfDetails) FilterID() filterIdEnum {
	return self.private.FilterID
}

func (self *fmfDetails) Name() string {
	return self.private.Name
}

func (self *fmfDetails) Description() string {
	return self.private.Description
}

func (self *fmfDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1gcgcxu7k0krt{
		&self.private,
	})
}

func (self *fmfDetails) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "filter_type":
			err = json.Unmarshal(rawMsg, &self.private.FilterType)
		case "filter_id":
			err = json.Unmarshal(rawMsg, &self.private.FilterID)
		case "name":
			err = json.Unmarshal(rawMsg, &self.private.Name)
		case "description":
			err = json.Unmarshal(rawMsg, &self.private.Description)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}
