/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package gopal

import (
	"encoding/json"
)

/*****************************

CreditCardPayment struct

******************************/
func NewCreditCardPayment() *CreditCardPayment {
	return &CreditCardPayment{
		private: private_13gx281ig5egq{},
	}
}

// TODO: Add `billing_agreement_tokens`, `payment_instruction`
type CreditCardPayment struct {
	private private_13gx281ig5egq
	*connection
	ExperienceProfileId string `json:"experience_profile_id"`
	*payment_error
}

type private_13gx281ig5egq struct {
	Intent        intentEnum             `json:"intent,omitempty"`
	State         stateEnum              `json:"state,omitempty"`
	Id            string                 `json:"id,omitempty"`
	FailureReason FailureReasonEnum      `json:"failure_reason,omitempty"`
	CreateTime    dateTime               `json:"create_time,omitempty"`
	UpdateTime    dateTime               `json:"update_time,omitempty"`
	Links         links                  `json:"links,omitempty"`
	Transactions  CreditCardTransactions `json:"transactions,omitempty"`
	Payer         creditCardPayer        `json:"payer,omitempty"`
	RedirectUrls  Redirects              `json:"redirect_urls,omitempty"`
}

type json_13gx281ig5egq struct {
	*private_13gx281ig5egq
	*connection
	ExperienceProfileId string `json:"experience_profile_id"`
	*payment_error
}

func (self *CreditCardPayment) Intent() intentEnum {
	return self.private.Intent
}

func (self *CreditCardPayment) State() stateEnum {
	return self.private.State
}

func (self *CreditCardPayment) Id() string {
	return self.private.Id
}

func (self *CreditCardPayment) FailureReason() FailureReasonEnum {
	return self.private.FailureReason
}

func (self *CreditCardPayment) CreateTime() dateTime {
	return self.private.CreateTime
}

func (self *CreditCardPayment) UpdateTime() dateTime {
	return self.private.UpdateTime
}

func (self *CreditCardPayment) Links() links {
	return self.private.Links
}

func (self *CreditCardPayment) Transactions() CreditCardTransactions {
	return self.private.Transactions
}

func (self *CreditCardPayment) Payer() creditCardPayer {
	return self.private.Payer
}

func (self *CreditCardPayment) RedirectUrls() Redirects {
	return self.private.RedirectUrls
}

func (self *CreditCardPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_13gx281ig5egq{
		&self.private,
		self.connection,
		self.ExperienceProfileId,
		self.payment_error,
	})
}

func (self *CreditCardPayment) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "intent":
			err = json.Unmarshal(rawMsg, &self.private.Intent)
		case "state":
			err = json.Unmarshal(rawMsg, &self.private.State)
		case "id":
			err = json.Unmarshal(rawMsg, &self.private.Id)
		case "failure_reason":
			err = json.Unmarshal(rawMsg, &self.private.FailureReason)
		case "create_time":
			err = json.Unmarshal(rawMsg, &self.private.CreateTime)
		case "update_time":
			err = json.Unmarshal(rawMsg, &self.private.UpdateTime)
		case "links":
			err = json.Unmarshal(rawMsg, &self.private.Links)
		case "transactions":
			err = json.Unmarshal(rawMsg, &self.private.Transactions)
		case "experience_profile_id":
			err = json.Unmarshal(rawMsg, &self.ExperienceProfileId)
		case "payer":
			err = json.Unmarshal(rawMsg, &self.private.Payer)
		case "redirect_urls":
			err = json.Unmarshal(rawMsg, &self.private.RedirectUrls)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

CreditCardTransaction struct

******************************/
func NewCreditCardTransaction() *CreditCardTransaction {
	return &CreditCardTransaction{
		private: private_1h4lccq9qqjay{},
	}
}

type CreditCardTransaction struct {
	private        private_1h4lccq9qqjay
	Description    string         `json:"description,omitempty"`
	PaymentOptions paymentOptions `json:"payment_options,omitempty"`
	InvoiceNumber  string         `json:"invoice_number,omitempty"`
	Custom         string         `json:"custom,omitempty"`
	SoftDescriptor string         `json:"soft_descriptor,omitempty"`
}

type private_1h4lccq9qqjay struct {
	ItemList         *creditCardItemList `json:"item_list,omitempty"`
	Amount           amount              `json:"amount"`
	RelatedResources relatedResources    `json:"related_resources,omitempty"`
}

type json_1h4lccq9qqjay struct {
	*private_1h4lccq9qqjay
	Description    string         `json:"description,omitempty"`
	PaymentOptions paymentOptions `json:"payment_options,omitempty"`
	InvoiceNumber  string         `json:"invoice_number,omitempty"`
	Custom         string         `json:"custom,omitempty"`
	SoftDescriptor string         `json:"soft_descriptor,omitempty"`
}

func (self *CreditCardTransaction) ItemList() *creditCardItemList {
	return self.private.ItemList
}

func (self *CreditCardTransaction) Amount() amount {
	return self.private.Amount
}

func (self *CreditCardTransaction) RelatedResources() relatedResources {
	return self.private.RelatedResources
}

func (self *CreditCardTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1h4lccq9qqjay{
		&self.private,
		self.Description,
		self.PaymentOptions,
		self.InvoiceNumber,
		self.Custom,
		self.SoftDescriptor,
	})
}

func (self *CreditCardTransaction) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "item_list":
			err = json.Unmarshal(rawMsg, &self.private.ItemList)
		case "amount":
			err = json.Unmarshal(rawMsg, &self.private.Amount)
		case "related_resources":
			err = json.Unmarshal(rawMsg, &self.private.RelatedResources)
		case "description":
			err = json.Unmarshal(rawMsg, &self.Description)
		case "payment_options":
			err = json.Unmarshal(rawMsg, &self.PaymentOptions)
		case "invoice_number":
			err = json.Unmarshal(rawMsg, &self.InvoiceNumber)
		case "custom":
			err = json.Unmarshal(rawMsg, &self.Custom)
		case "soft_descriptor":
			err = json.Unmarshal(rawMsg, &self.SoftDescriptor)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

creditCardItemList struct

******************************/
func NewCreditCardItemList() *creditCardItemList {
	return &creditCardItemList{
		private: private_19oaog89ph3ob{},
	}
}

type creditCardItemList struct {
	private private_19oaog89ph3ob
}

type private_19oaog89ph3ob struct {
	Items           CreditCardItems  `json:"items,omitempty"`
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

type json_19oaog89ph3ob struct {
	*private_19oaog89ph3ob
}

func (self *creditCardItemList) Items() CreditCardItems {
	return self.private.Items
}

func (self *creditCardItemList) ShippingAddress() *ShippingAddress {
	return self.private.ShippingAddress
}

func (self *creditCardItemList) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_19oaog89ph3ob{
		&self.private,
	})
}

func (self *creditCardItemList) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "items":
			err = json.Unmarshal(rawMsg, &self.private.Items)
		case "shipping_address":
			err = json.Unmarshal(rawMsg, &self.private.ShippingAddress)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

CreditCardItem struct

******************************/
func NewCreditCardItem() *CreditCardItem {
	return &CreditCardItem{
		private: private_icc4n95cnzdv{},
	}
}

type CreditCardItem struct {
	private  private_icc4n95cnzdv
	Quantity int64   `json:"quantity,string"`
	Name     string  `json:"name"`
	Price    float64 `json:"price,string"`
	Sku      string  `json:"sku,omitempty"`
}

type private_icc4n95cnzdv struct {
	Currency CurrencyTypeEnum `json:"currency"`
}

type json_icc4n95cnzdv struct {
	*private_icc4n95cnzdv
	Quantity int64   `json:"quantity,string"`
	Name     string  `json:"name"`
	Price    float64 `json:"price,string"`
	Sku      string  `json:"sku,omitempty"`
}

func (self *CreditCardItem) Currency() CurrencyTypeEnum {
	return self.private.Currency
}

func (self *CreditCardItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_icc4n95cnzdv{
		&self.private,
		self.Quantity,
		self.Name,
		self.Price,
		self.Sku,
	})
}

func (self *CreditCardItem) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "currency":
			err = json.Unmarshal(rawMsg, &self.private.Currency)
		case "quantity":
			err = json.Unmarshal(rawMsg, &self.Quantity)
		case "name":
			err = json.Unmarshal(rawMsg, &self.Name)
		case "price":
			err = json.Unmarshal(rawMsg, &self.Price)
		case "sku":
			err = json.Unmarshal(rawMsg, &self.Sku)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

creditCardPayer struct

******************************/
func NewCreditCardPayer() *creditCardPayer {
	return &creditCardPayer{
		private: private_xxp8uo31pq99{},
	}
}

// Source of the funds for this payment represented by a credit card.
type creditCardPayer struct {
	private private_xxp8uo31pq99
}

type private_xxp8uo31pq99 struct {
	// Must be PaymentMethod.CreditCard
	PaymentMethod      PaymentMethodEnum  `json:"payment_method,omitempty"`
	FundingInstruments fundingInstruments `json:"funding_instruments,omitempty"`
	PayerInfo          *PayerInfo         `json:"payer_info,omitempty"`
}

type json_xxp8uo31pq99 struct {
	*private_xxp8uo31pq99
}

func (self *creditCardPayer) PaymentMethod() PaymentMethodEnum {
	return self.private.PaymentMethod
}

func (self *creditCardPayer) FundingInstruments() fundingInstruments {
	return self.private.FundingInstruments
}

func (self *creditCardPayer) PayerInfo() *PayerInfo {
	return self.private.PayerInfo
}

func (self *creditCardPayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_xxp8uo31pq99{
		&self.private,
	})
}

func (self *creditCardPayer) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "payment_method":
			err = json.Unmarshal(rawMsg, &self.private.PaymentMethod)
		case "funding_instruments":
			err = json.Unmarshal(rawMsg, &self.private.FundingInstruments)
		case "payer_info":
			err = json.Unmarshal(rawMsg, &self.private.PayerInfo)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

PayerInfo struct

******************************/
func NewPayerInfo() *PayerInfo {
	return &PayerInfo{
		private: private_wluxqrjsvp64{},
	}
}

type PayerInfo struct {
	private private_wluxqrjsvp64
	// Email address representing the payer. 127 characters max.
	Email string `json:"email,omitempty"`
	// Salutation of the payer.
	Salutation string `json:"salutation,omitempty"`
	// Suffix of the payer.
	Suffix string `json:"suffix,omitempty"`
	// Two-letter registered country code of the payer to identify the buyer country.
	CountryCode CountryCodeEnum `json:"country_code,omitempty"`
	// Phone number representing the payer. 20 characters max.
	Phone string `json:"phone,omitempty"`
	// First name of the payer. Value assigned by PayPal.
	FirstName string `json:"first_name,omitempty"`
	// Middle name of the payer. Value assigned by PayPal.
	MiddleName string `json:"middle_name,omitempty"`
	// Last name of the payer. Value assigned by PayPal.
	LastName string `json:"last_name,omitempty"`
	// PayPal assigned Payer ID. Value assigned by PayPal.
	PayerId string `json:"payer_id,omitempty"`
	// Shipping address of payer PayPal account. Value assigned by PayPal.
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

type private_wluxqrjsvp64 struct{}

type json_wluxqrjsvp64 struct {
	*private_wluxqrjsvp64
	Email           string           `json:"email,omitempty"`
	Salutation      string           `json:"salutation,omitempty"`
	Suffix          string           `json:"suffix,omitempty"`
	CountryCode     CountryCodeEnum  `json:"country_code,omitempty"`
	Phone           string           `json:"phone,omitempty"`
	FirstName       string           `json:"first_name,omitempty"`
	MiddleName      string           `json:"middle_name,omitempty"`
	LastName        string           `json:"last_name,omitempty"`
	PayerId         string           `json:"payer_id,omitempty"`
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

func (self *PayerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_wluxqrjsvp64{
		&self.private,
		self.Email,
		self.Salutation,
		self.Suffix,
		self.CountryCode,
		self.Phone,
		self.FirstName,
		self.MiddleName,
		self.LastName,
		self.PayerId,
		self.ShippingAddress,
	})
}

func (self *PayerInfo) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "email":
			err = json.Unmarshal(rawMsg, &self.Email)
		case "salutation":
			err = json.Unmarshal(rawMsg, &self.Salutation)
		case "suffix":
			err = json.Unmarshal(rawMsg, &self.Suffix)
		case "country_code":
			err = json.Unmarshal(rawMsg, &self.CountryCode)
		case "phone":
			err = json.Unmarshal(rawMsg, &self.Phone)
		case "first_name":
			err = json.Unmarshal(rawMsg, &self.FirstName)
		case "middle_name":
			err = json.Unmarshal(rawMsg, &self.MiddleName)
		case "last_name":
			err = json.Unmarshal(rawMsg, &self.LastName)
		case "payer_id":
			err = json.Unmarshal(rawMsg, &self.PayerId)
		case "shipping_address":
			err = json.Unmarshal(rawMsg, &self.ShippingAddress)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}
