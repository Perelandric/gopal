/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package gopal

import (
	"log"
	"strconv"
)

/*****************************

ServerEnum

******************************/

type ServerEnum struct{ value_uqfcoeh7mzq0 uint8 }

var Server = struct {
	Live    ServerEnum
	Sandbox ServerEnum

	// Used to iterate in range loops
	Values [2]ServerEnum
}{
	Live:    ServerEnum{value_uqfcoeh7mzq0: 1},
	Sandbox: ServerEnum{value_uqfcoeh7mzq0: 2},
}

func init() {
	Server.Values = [2]ServerEnum{
		Server.Live, Server.Sandbox,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Se ServerEnum) Value() uint8 {
	return Se.value_uqfcoeh7mzq0
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Se ServerEnum) IntValue() int {
	return int(Se.value_uqfcoeh7mzq0)
}

// Name returns the name of the variant as a string.
func (Se ServerEnum) Name() string {
	switch Se.value_uqfcoeh7mzq0 {
	case 1:
		return "Live"
	case 2:
		return "Sandbox"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Se ServerEnum) Type() string {
	return "ServerEnum"
}

// Namespace returns the variant's namespace name as a string
func (Se ServerEnum) Namespace() string {
	return "Server"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Se ServerEnum) String() string {
	switch Se.value_uqfcoeh7mzq0 {
	case 1:
		return "Live"
	case 2:
		return "Sandbox"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Se ServerEnum) Description() string {
	switch Se.value_uqfcoeh7mzq0 {
	case 1:
		return "Live"
	case 2:
		return "Sandbox"
	}
	return ""
}

// JSON marshaling methods
func (Se ServerEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(Se.IntValue())), nil
}

func (Se *ServerEnum) UnmarshalJSON(b []byte) error {
	var n, err = strconv.ParseUint(string(b), 10, 64)
	if err != nil {
		return err
	}
	Se.value_uqfcoeh7mzq0 = uint8(n)
	return nil
}

/*****************************

sortByEnum

******************************/

type sortByEnum struct{ value_1pn2o3z4rk6pm uint8 }

var sortBy = struct {
	CreateTime sortByEnum
	UpdateTime sortByEnum

	// Used to iterate in range loops
	Values [2]sortByEnum
}{
	CreateTime: sortByEnum{value_1pn2o3z4rk6pm: 1},
	UpdateTime: sortByEnum{value_1pn2o3z4rk6pm: 2},
}

func init() {
	sortBy.Values = [2]sortByEnum{
		sortBy.CreateTime, sortBy.UpdateTime,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (se sortByEnum) Value() uint8 {
	return se.value_1pn2o3z4rk6pm
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (se sortByEnum) IntValue() int {
	return int(se.value_1pn2o3z4rk6pm)
}

// Name returns the name of the variant as a string.
func (se sortByEnum) Name() string {
	switch se.value_1pn2o3z4rk6pm {
	case 1:
		return "CreateTime"
	case 2:
		return "UpdateTime"
	}

	return ""
}

// Type returns the variant's type name as a string
func (se sortByEnum) Type() string {
	return "sortByEnum"
}

// Namespace returns the variant's namespace name as a string
func (se sortByEnum) Namespace() string {
	return "sortBy"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (se sortByEnum) String() string {
	switch se.value_1pn2o3z4rk6pm {
	case 1:
		return "create_time"
	case 2:
		return "update_time"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (se sortByEnum) Description() string {
	switch se.value_1pn2o3z4rk6pm {
	case 1:
		return "create_time"
	case 2:
		return "update_time"
	}
	return ""
}

// JSON marshaling methods
func (se sortByEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(se.String())), nil
}

func (se *sortByEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "create_time":
		se.value_1pn2o3z4rk6pm = 1
		return nil
	case "update_time":
		se.value_1pn2o3z4rk6pm = 2
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling sortByEnum\n", s)
	}

	return nil
}

/*****************************

sortOrderEnum

******************************/

type sortOrderEnum struct{ value_1mq07muwb2o7x uint8 }

var sortOrder = struct {
	DESC sortOrderEnum
	ASC  sortOrderEnum

	// Used to iterate in range loops
	Values [2]sortOrderEnum
}{
	DESC: sortOrderEnum{value_1mq07muwb2o7x: 1},
	ASC:  sortOrderEnum{value_1mq07muwb2o7x: 2},
}

func init() {
	sortOrder.Values = [2]sortOrderEnum{
		sortOrder.DESC, sortOrder.ASC,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (se sortOrderEnum) Value() uint8 {
	return se.value_1mq07muwb2o7x
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (se sortOrderEnum) IntValue() int {
	return int(se.value_1mq07muwb2o7x)
}

// Name returns the name of the variant as a string.
func (se sortOrderEnum) Name() string {
	switch se.value_1mq07muwb2o7x {
	case 1:
		return "DESC"
	case 2:
		return "ASC"
	}

	return ""
}

// Type returns the variant's type name as a string
func (se sortOrderEnum) Type() string {
	return "sortOrderEnum"
}

// Namespace returns the variant's namespace name as a string
func (se sortOrderEnum) Namespace() string {
	return "sortOrder"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (se sortOrderEnum) String() string {
	switch se.value_1mq07muwb2o7x {
	case 1:
		return "DESC"
	case 2:
		return "ASC"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (se sortOrderEnum) Description() string {
	switch se.value_1mq07muwb2o7x {
	case 1:
		return "DESC"
	case 2:
		return "ASC"
	}
	return ""
}

// JSON marshaling methods
func (se sortOrderEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(se.String())), nil
}

func (se *sortOrderEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "DESC":
		se.value_1mq07muwb2o7x = 1
		return nil
	case "ASC":
		se.value_1mq07muwb2o7x = 2
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling sortOrderEnum\n", s)
	}

	return nil
}

/*****************************

relTypeEnum

******************************/

type relTypeEnum struct{ value_1tva9u2ef9xvd uint8 }

var relType = struct {
	self          relTypeEnum
	parentPayment relTypeEnum
	execute       relTypeEnum
	refund        relTypeEnum
	approvalUrl   relTypeEnum
	suspend       relTypeEnum
	reActivate    relTypeEnum
	cancel        relTypeEnum
	void          relTypeEnum
	authorization relTypeEnum
	capture       relTypeEnum
	reauthorize   relTypeEnum
	order         relTypeEnum
	item          relTypeEnum
	batch         relTypeEnum
	delete        relTypeEnum
	patch         relTypeEnum
	first         relTypeEnum
	last          relTypeEnum
	update        relTypeEnum
	resend        relTypeEnum
	next          relTypeEnum
	previous      relTypeEnum
	start         relTypeEnum
	nextPage      relTypeEnum
	previousPage  relTypeEnum

	// Used to iterate in range loops
	Values [26]relTypeEnum
}{
	self:          relTypeEnum{value_1tva9u2ef9xvd: 1},
	parentPayment: relTypeEnum{value_1tva9u2ef9xvd: 2},
	execute:       relTypeEnum{value_1tva9u2ef9xvd: 3},
	refund:        relTypeEnum{value_1tva9u2ef9xvd: 4},
	approvalUrl:   relTypeEnum{value_1tva9u2ef9xvd: 5},
	suspend:       relTypeEnum{value_1tva9u2ef9xvd: 6},
	reActivate:    relTypeEnum{value_1tva9u2ef9xvd: 7},
	cancel:        relTypeEnum{value_1tva9u2ef9xvd: 8},
	void:          relTypeEnum{value_1tva9u2ef9xvd: 9},
	authorization: relTypeEnum{value_1tva9u2ef9xvd: 10},
	capture:       relTypeEnum{value_1tva9u2ef9xvd: 11},
	reauthorize:   relTypeEnum{value_1tva9u2ef9xvd: 12},
	order:         relTypeEnum{value_1tva9u2ef9xvd: 13},
	item:          relTypeEnum{value_1tva9u2ef9xvd: 14},
	batch:         relTypeEnum{value_1tva9u2ef9xvd: 15},
	delete:        relTypeEnum{value_1tva9u2ef9xvd: 16},
	patch:         relTypeEnum{value_1tva9u2ef9xvd: 17},
	first:         relTypeEnum{value_1tva9u2ef9xvd: 18},
	last:          relTypeEnum{value_1tva9u2ef9xvd: 19},
	update:        relTypeEnum{value_1tva9u2ef9xvd: 20},
	resend:        relTypeEnum{value_1tva9u2ef9xvd: 21},
	next:          relTypeEnum{value_1tva9u2ef9xvd: 22},
	previous:      relTypeEnum{value_1tva9u2ef9xvd: 23},
	start:         relTypeEnum{value_1tva9u2ef9xvd: 24},
	nextPage:      relTypeEnum{value_1tva9u2ef9xvd: 25},
	previousPage:  relTypeEnum{value_1tva9u2ef9xvd: 26},
}

func init() {
	relType.Values = [26]relTypeEnum{
		relType.self, relType.parentPayment, relType.execute, relType.refund, relType.approvalUrl, relType.suspend, relType.reActivate, relType.cancel, relType.void, relType.authorization, relType.capture, relType.reauthorize, relType.order, relType.item, relType.batch, relType.delete, relType.patch, relType.first, relType.last, relType.update, relType.resend, relType.next, relType.previous, relType.start, relType.nextPage, relType.previousPage,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (re relTypeEnum) Value() uint8 {
	return re.value_1tva9u2ef9xvd
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (re relTypeEnum) IntValue() int {
	return int(re.value_1tva9u2ef9xvd)
}

// Name returns the name of the variant as a string.
func (re relTypeEnum) Name() string {
	switch re.value_1tva9u2ef9xvd {
	case 1:
		return "self"
	case 2:
		return "parentPayment"
	case 3:
		return "execute"
	case 4:
		return "refund"
	case 5:
		return "approvalUrl"
	case 6:
		return "suspend"
	case 7:
		return "reActivate"
	case 8:
		return "cancel"
	case 9:
		return "void"
	case 10:
		return "authorization"
	case 11:
		return "capture"
	case 12:
		return "reauthorize"
	case 13:
		return "order"
	case 14:
		return "item"
	case 15:
		return "batch"
	case 16:
		return "delete"
	case 17:
		return "patch"
	case 18:
		return "first"
	case 19:
		return "last"
	case 20:
		return "update"
	case 21:
		return "resend"
	case 22:
		return "next"
	case 23:
		return "previous"
	case 24:
		return "start"
	case 25:
		return "nextPage"
	case 26:
		return "previousPage"
	}

	return ""
}

// Type returns the variant's type name as a string
func (re relTypeEnum) Type() string {
	return "relTypeEnum"
}

// Namespace returns the variant's namespace name as a string
func (re relTypeEnum) Namespace() string {
	return "relType"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (re relTypeEnum) String() string {
	switch re.value_1tva9u2ef9xvd {
	case 1:
		return "self"
	case 2:
		return "parent_payment"
	case 3:
		return "execute"
	case 4:
		return "refund"
	case 5:
		return "approval_url"
	case 6:
		return "suspend"
	case 7:
		return "re_activate"
	case 8:
		return "cancel"
	case 9:
		return "void"
	case 10:
		return "authorization"
	case 11:
		return "capture"
	case 12:
		return "reauthorize"
	case 13:
		return "order"
	case 14:
		return "item"
	case 15:
		return "batch"
	case 16:
		return "delete"
	case 17:
		return "patch"
	case 18:
		return "first"
	case 19:
		return "last"
	case 20:
		return "update"
	case 21:
		return "resend"
	case 22:
		return "next"
	case 23:
		return "previous"
	case 24:
		return "start"
	case 25:
		return "next_page"
	case 26:
		return "previous_page"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (re relTypeEnum) Description() string {
	switch re.value_1tva9u2ef9xvd {
	case 1:
		return "self"
	case 2:
		return "parent_payment"
	case 3:
		return "execute"
	case 4:
		return "refund"
	case 5:
		return "approval_url"
	case 6:
		return "suspend"
	case 7:
		return "re_activate"
	case 8:
		return "cancel"
	case 9:
		return "void"
	case 10:
		return "authorization"
	case 11:
		return "capture"
	case 12:
		return "reauthorize"
	case 13:
		return "order"
	case 14:
		return "item"
	case 15:
		return "batch"
	case 16:
		return "delete"
	case 17:
		return "patch"
	case 18:
		return "first"
	case 19:
		return "last"
	case 20:
		return "update"
	case 21:
		return "resend"
	case 22:
		return "next"
	case 23:
		return "previous"
	case 24:
		return "start"
	case 25:
		return "next_page"
	case 26:
		return "previous_page"
	}
	return ""
}

// JSON marshaling methods
func (re relTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(re.String())), nil
}

func (re *relTypeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "self":
		re.value_1tva9u2ef9xvd = 1
		return nil
	case "parent_payment":
		re.value_1tva9u2ef9xvd = 2
		return nil
	case "execute":
		re.value_1tva9u2ef9xvd = 3
		return nil
	case "refund":
		re.value_1tva9u2ef9xvd = 4
		return nil
	case "approval_url":
		re.value_1tva9u2ef9xvd = 5
		return nil
	case "suspend":
		re.value_1tva9u2ef9xvd = 6
		return nil
	case "re_activate":
		re.value_1tva9u2ef9xvd = 7
		return nil
	case "cancel":
		re.value_1tva9u2ef9xvd = 8
		return nil
	case "void":
		re.value_1tva9u2ef9xvd = 9
		return nil
	case "authorization":
		re.value_1tva9u2ef9xvd = 10
		return nil
	case "capture":
		re.value_1tva9u2ef9xvd = 11
		return nil
	case "reauthorize":
		re.value_1tva9u2ef9xvd = 12
		return nil
	case "order":
		re.value_1tva9u2ef9xvd = 13
		return nil
	case "item":
		re.value_1tva9u2ef9xvd = 14
		return nil
	case "batch":
		re.value_1tva9u2ef9xvd = 15
		return nil
	case "delete":
		re.value_1tva9u2ef9xvd = 16
		return nil
	case "patch":
		re.value_1tva9u2ef9xvd = 17
		return nil
	case "first":
		re.value_1tva9u2ef9xvd = 18
		return nil
	case "last":
		re.value_1tva9u2ef9xvd = 19
		return nil
	case "update":
		re.value_1tva9u2ef9xvd = 20
		return nil
	case "resend":
		re.value_1tva9u2ef9xvd = 21
		return nil
	case "next":
		re.value_1tva9u2ef9xvd = 22
		return nil
	case "previous":
		re.value_1tva9u2ef9xvd = 23
		return nil
	case "start":
		re.value_1tva9u2ef9xvd = 24
		return nil
	case "next_page":
		re.value_1tva9u2ef9xvd = 25
		return nil
	case "previous_page":
		re.value_1tva9u2ef9xvd = 26
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling relTypeEnum\n", s)
	}

	return nil
}

/*****************************

methodEnum

******************************/

type methodEnum struct{ value_13z1d58s44vum uint8 }

var method = struct {
	get      methodEnum
	post     methodEnum
	redirect methodEnum
	delete   methodEnum
	patch    methodEnum

	// Used to iterate in range loops
	Values [5]methodEnum
}{
	get:      methodEnum{value_13z1d58s44vum: 1},
	post:     methodEnum{value_13z1d58s44vum: 2},
	redirect: methodEnum{value_13z1d58s44vum: 3},
	delete:   methodEnum{value_13z1d58s44vum: 4},
	patch:    methodEnum{value_13z1d58s44vum: 5},
}

func init() {
	method.Values = [5]methodEnum{
		method.get, method.post, method.redirect, method.delete, method.patch,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (me methodEnum) Value() uint8 {
	return me.value_13z1d58s44vum
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (me methodEnum) IntValue() int {
	return int(me.value_13z1d58s44vum)
}

// Name returns the name of the variant as a string.
func (me methodEnum) Name() string {
	switch me.value_13z1d58s44vum {
	case 1:
		return "get"
	case 2:
		return "post"
	case 3:
		return "redirect"
	case 4:
		return "delete"
	case 5:
		return "patch"
	}

	return ""
}

// Type returns the variant's type name as a string
func (me methodEnum) Type() string {
	return "methodEnum"
}

// Namespace returns the variant's namespace name as a string
func (me methodEnum) Namespace() string {
	return "method"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (me methodEnum) String() string {
	switch me.value_13z1d58s44vum {
	case 1:
		return "GET"
	case 2:
		return "POST"
	case 3:
		return "REDIRECT"
	case 4:
		return "DELETE"
	case 5:
		return "PATCH"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (me methodEnum) Description() string {
	switch me.value_13z1d58s44vum {
	case 1:
		return "GET"
	case 2:
		return "POST"
	case 3:
		return "REDIRECT"
	case 4:
		return "DELETE"
	case 5:
		return "PATCH"
	}
	return ""
}

// JSON marshaling methods
func (me methodEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(me.String())), nil
}

func (me *methodEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "GET":
		me.value_13z1d58s44vum = 1
		return nil
	case "POST":
		me.value_13z1d58s44vum = 2
		return nil
	case "REDIRECT":
		me.value_13z1d58s44vum = 3
		return nil
	case "DELETE":
		me.value_13z1d58s44vum = 4
		return nil
	case "PATCH":
		me.value_13z1d58s44vum = 5
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling methodEnum\n", s)
	}

	return nil
}

/*****************************

payerStatusEnum

******************************/

type payerStatusEnum struct{ value_8ay6yyvaki87 uint8 }

var payerStatus = struct {
	verified   payerStatusEnum
	unverified payerStatusEnum

	// Used to iterate in range loops
	Values [2]payerStatusEnum
}{
	verified:   payerStatusEnum{value_8ay6yyvaki87: 1},
	unverified: payerStatusEnum{value_8ay6yyvaki87: 2},
}

func init() {
	payerStatus.Values = [2]payerStatusEnum{
		payerStatus.verified, payerStatus.unverified,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (pe payerStatusEnum) Value() uint8 {
	return pe.value_8ay6yyvaki87
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (pe payerStatusEnum) IntValue() int {
	return int(pe.value_8ay6yyvaki87)
}

// Name returns the name of the variant as a string.
func (pe payerStatusEnum) Name() string {
	switch pe.value_8ay6yyvaki87 {
	case 1:
		return "verified"
	case 2:
		return "unverified"
	}

	return ""
}

// Type returns the variant's type name as a string
func (pe payerStatusEnum) Type() string {
	return "payerStatusEnum"
}

// Namespace returns the variant's namespace name as a string
func (pe payerStatusEnum) Namespace() string {
	return "payerStatus"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (pe payerStatusEnum) String() string {
	switch pe.value_8ay6yyvaki87 {
	case 1:
		return "VERIFIED"
	case 2:
		return "UNVERIFIED"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (pe payerStatusEnum) Description() string {
	switch pe.value_8ay6yyvaki87 {
	case 1:
		return "VERIFIED"
	case 2:
		return "UNVERIFIED"
	}
	return ""
}

// JSON marshaling methods
func (pe payerStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(pe.String())), nil
}

func (pe *payerStatusEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "VERIFIED":
		pe.value_8ay6yyvaki87 = 1
		return nil
	case "UNVERIFIED":
		pe.value_8ay6yyvaki87 = 2
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling payerStatusEnum\n", s)
	}

	return nil
}

/*****************************

intentEnum

******************************/

type intentEnum struct{ value_1n21qkcalud96 uint8 }

var intent = struct {
	sale      intentEnum
	authorize intentEnum
	order     intentEnum

	// Used to iterate in range loops
	Values [3]intentEnum
}{
	sale:      intentEnum{value_1n21qkcalud96: 1},
	authorize: intentEnum{value_1n21qkcalud96: 2},
	order:     intentEnum{value_1n21qkcalud96: 3},
}

func init() {
	intent.Values = [3]intentEnum{
		intent.sale, intent.authorize, intent.order,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (ie intentEnum) Value() uint8 {
	return ie.value_1n21qkcalud96
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (ie intentEnum) IntValue() int {
	return int(ie.value_1n21qkcalud96)
}

// Name returns the name of the variant as a string.
func (ie intentEnum) Name() string {
	switch ie.value_1n21qkcalud96 {
	case 1:
		return "sale"
	case 2:
		return "authorize"
	case 3:
		return "order"
	}

	return ""
}

// Type returns the variant's type name as a string
func (ie intentEnum) Type() string {
	return "intentEnum"
}

// Namespace returns the variant's namespace name as a string
func (ie intentEnum) Namespace() string {
	return "intent"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (ie intentEnum) String() string {
	switch ie.value_1n21qkcalud96 {
	case 1:
		return "sale"
	case 2:
		return "authorize"
	case 3:
		return "order"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (ie intentEnum) Description() string {
	switch ie.value_1n21qkcalud96 {
	case 1:
		return "sale"
	case 2:
		return "authorize"
	case 3:
		return "order"
	}
	return ""
}

// JSON marshaling methods
func (ie intentEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(ie.String())), nil
}

func (ie *intentEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "sale":
		ie.value_1n21qkcalud96 = 1
		return nil
	case "authorize":
		ie.value_1n21qkcalud96 = 2
		return nil
	case "order":
		ie.value_1n21qkcalud96 = 3
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling intentEnum\n", s)
	}

	return nil
}

/*****************************

FailureReasonEnum

******************************/

type FailureReasonEnum struct{ value_1pshskr73m82b uint8 }

var FailureReason = struct {
	UnableToCompleteTransaction FailureReasonEnum
	InvalidPaymentMethod        FailureReasonEnum
	PayerCannotPay              FailureReasonEnum
	CannotPayThisPayee          FailureReasonEnum
	RedirectRequired            FailureReasonEnum
	PayeeFilterRestrictions     FailureReasonEnum

	// Used to iterate in range loops
	Values [6]FailureReasonEnum
}{
	UnableToCompleteTransaction: FailureReasonEnum{value_1pshskr73m82b: 1},
	InvalidPaymentMethod:        FailureReasonEnum{value_1pshskr73m82b: 2},
	PayerCannotPay:              FailureReasonEnum{value_1pshskr73m82b: 3},
	CannotPayThisPayee:          FailureReasonEnum{value_1pshskr73m82b: 4},
	RedirectRequired:            FailureReasonEnum{value_1pshskr73m82b: 5},
	PayeeFilterRestrictions:     FailureReasonEnum{value_1pshskr73m82b: 6},
}

func init() {
	FailureReason.Values = [6]FailureReasonEnum{
		FailureReason.UnableToCompleteTransaction, FailureReason.InvalidPaymentMethod, FailureReason.PayerCannotPay, FailureReason.CannotPayThisPayee, FailureReason.RedirectRequired, FailureReason.PayeeFilterRestrictions,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Fe FailureReasonEnum) Value() uint8 {
	return Fe.value_1pshskr73m82b
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Fe FailureReasonEnum) IntValue() int {
	return int(Fe.value_1pshskr73m82b)
}

// Name returns the name of the variant as a string.
func (Fe FailureReasonEnum) Name() string {
	switch Fe.value_1pshskr73m82b {
	case 1:
		return "UnableToCompleteTransaction"
	case 2:
		return "InvalidPaymentMethod"
	case 3:
		return "PayerCannotPay"
	case 4:
		return "CannotPayThisPayee"
	case 5:
		return "RedirectRequired"
	case 6:
		return "PayeeFilterRestrictions"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Fe FailureReasonEnum) Type() string {
	return "FailureReasonEnum"
}

// Namespace returns the variant's namespace name as a string
func (Fe FailureReasonEnum) Namespace() string {
	return "FailureReason"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Fe FailureReasonEnum) String() string {
	switch Fe.value_1pshskr73m82b {
	case 1:
		return "UNABLE_TO_COMPLETE_TRANSACTION"
	case 2:
		return "INVALID_PAYMENT_METHOD"
	case 3:
		return "PAYER_CANNOT_PAY"
	case 4:
		return "CANNOT_PAY_THIS_PAYEE"
	case 5:
		return "REDIRECT_REQUIRED"
	case 6:
		return "PAYEE_FILTER_RESTRICTIONS"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Fe FailureReasonEnum) Description() string {
	switch Fe.value_1pshskr73m82b {
	case 1:
		return "UNABLE_TO_COMPLETE_TRANSACTION"
	case 2:
		return "INVALID_PAYMENT_METHOD"
	case 3:
		return "PAYER_CANNOT_PAY"
	case 4:
		return "CANNOT_PAY_THIS_PAYEE"
	case 5:
		return "REDIRECT_REQUIRED"
	case 6:
		return "PAYEE_FILTER_RESTRICTIONS"
	}
	return ""
}

// JSON marshaling methods
func (Fe FailureReasonEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Fe.String())), nil
}

func (Fe *FailureReasonEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "UNABLE_TO_COMPLETE_TRANSACTION":
		Fe.value_1pshskr73m82b = 1
		return nil
	case "INVALID_PAYMENT_METHOD":
		Fe.value_1pshskr73m82b = 2
		return nil
	case "PAYER_CANNOT_PAY":
		Fe.value_1pshskr73m82b = 3
		return nil
	case "CANNOT_PAY_THIS_PAYEE":
		Fe.value_1pshskr73m82b = 4
		return nil
	case "REDIRECT_REQUIRED":
		Fe.value_1pshskr73m82b = 5
		return nil
	case "PAYEE_FILTER_RESTRICTIONS":
		Fe.value_1pshskr73m82b = 6
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling FailureReasonEnum\n", s)
	}

	return nil
}

/*****************************

fmfFilterEnum

******************************/

type fmfFilterEnum struct{ value_1912w5izgz3zm uint8 }

var fmfFilter = struct {
	accept  fmfFilterEnum
	pending fmfFilterEnum
	deny    fmfFilterEnum
	report  fmfFilterEnum

	// Used to iterate in range loops
	Values [4]fmfFilterEnum
}{
	accept:  fmfFilterEnum{value_1912w5izgz3zm: 1},
	pending: fmfFilterEnum{value_1912w5izgz3zm: 2},
	deny:    fmfFilterEnum{value_1912w5izgz3zm: 3},
	report:  fmfFilterEnum{value_1912w5izgz3zm: 4},
}

func init() {
	fmfFilter.Values = [4]fmfFilterEnum{
		fmfFilter.accept, fmfFilter.pending, fmfFilter.deny, fmfFilter.report,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (fe fmfFilterEnum) Value() uint8 {
	return fe.value_1912w5izgz3zm
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (fe fmfFilterEnum) IntValue() int {
	return int(fe.value_1912w5izgz3zm)
}

// Name returns the name of the variant as a string.
func (fe fmfFilterEnum) Name() string {
	switch fe.value_1912w5izgz3zm {
	case 1:
		return "accept"
	case 2:
		return "pending"
	case 3:
		return "deny"
	case 4:
		return "report"
	}

	return ""
}

// Type returns the variant's type name as a string
func (fe fmfFilterEnum) Type() string {
	return "fmfFilterEnum"
}

// Namespace returns the variant's namespace name as a string
func (fe fmfFilterEnum) Namespace() string {
	return "fmfFilter"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (fe fmfFilterEnum) String() string {
	switch fe.value_1912w5izgz3zm {
	case 1:
		return "ACCEPT"
	case 2:
		return "PENDING"
	case 3:
		return "DENY"
	case 4:
		return "REPORT"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (fe fmfFilterEnum) Description() string {
	switch fe.value_1912w5izgz3zm {
	case 1:
		return "An ACCEPT filter is triggered only for the TOTAL_PURCHASE_PRICE_MINIMUM filter setting and is returned only in direct credit card payments where payment is accepted."
	case 2:
		return "Triggers a PENDING filter action where you need to explicitly accept or deny the transaction."
	case 3:
		return "Triggers a DENY action where payment is denied automatically."
	case 4:
		return "Triggers the Flag testing mode where payment is accepted."
	}
	return ""
}

// JSON marshaling methods
func (fe fmfFilterEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(fe.String())), nil
}

func (fe *fmfFilterEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "ACCEPT":
		fe.value_1912w5izgz3zm = 1
		return nil
	case "PENDING":
		fe.value_1912w5izgz3zm = 2
		return nil
	case "DENY":
		fe.value_1912w5izgz3zm = 3
		return nil
	case "REPORT":
		fe.value_1912w5izgz3zm = 4
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling fmfFilterEnum\n", s)
	}

	return nil
}

/*****************************

filterIdEnum

******************************/

type filterIdEnum struct{ value_pdxjo8s5dbah uint8 }

var filterId = struct {
	maximumTransactionAmount           filterIdEnum
	unconfirmedAddress                 filterIdEnum
	countryMonitor                     filterIdEnum
	avsNoMatch                         filterIdEnum
	avsPartialMatch                    filterIdEnum
	avsUnavailableOrUnsupported        filterIdEnum
	cardSecurityCodeMismatch           filterIdEnum
	billingOrShippingAddressMismatch   filterIdEnum
	riskyZipCode                       filterIdEnum
	suspectedFreightForwarderCheck     filterIdEnum
	riskyEmailAddressDomainCheck       filterIdEnum
	riskyBankIdentificationNumberCheck filterIdEnum
	riskyIpAddressRange                filterIdEnum
	largeOrderNumber                   filterIdEnum
	totalPurchasePriceMinimum          filterIdEnum
	ipAddressVelocity                  filterIdEnum
	paypalFraudModel                   filterIdEnum

	// Used to iterate in range loops
	Values [17]filterIdEnum
}{
	maximumTransactionAmount:           filterIdEnum{value_pdxjo8s5dbah: 1},
	unconfirmedAddress:                 filterIdEnum{value_pdxjo8s5dbah: 2},
	countryMonitor:                     filterIdEnum{value_pdxjo8s5dbah: 3},
	avsNoMatch:                         filterIdEnum{value_pdxjo8s5dbah: 4},
	avsPartialMatch:                    filterIdEnum{value_pdxjo8s5dbah: 5},
	avsUnavailableOrUnsupported:        filterIdEnum{value_pdxjo8s5dbah: 6},
	cardSecurityCodeMismatch:           filterIdEnum{value_pdxjo8s5dbah: 7},
	billingOrShippingAddressMismatch:   filterIdEnum{value_pdxjo8s5dbah: 8},
	riskyZipCode:                       filterIdEnum{value_pdxjo8s5dbah: 9},
	suspectedFreightForwarderCheck:     filterIdEnum{value_pdxjo8s5dbah: 10},
	riskyEmailAddressDomainCheck:       filterIdEnum{value_pdxjo8s5dbah: 11},
	riskyBankIdentificationNumberCheck: filterIdEnum{value_pdxjo8s5dbah: 12},
	riskyIpAddressRange:                filterIdEnum{value_pdxjo8s5dbah: 13},
	largeOrderNumber:                   filterIdEnum{value_pdxjo8s5dbah: 14},
	totalPurchasePriceMinimum:          filterIdEnum{value_pdxjo8s5dbah: 15},
	ipAddressVelocity:                  filterIdEnum{value_pdxjo8s5dbah: 16},
	paypalFraudModel:                   filterIdEnum{value_pdxjo8s5dbah: 17},
}

func init() {
	filterId.Values = [17]filterIdEnum{
		filterId.maximumTransactionAmount, filterId.unconfirmedAddress, filterId.countryMonitor, filterId.avsNoMatch, filterId.avsPartialMatch, filterId.avsUnavailableOrUnsupported, filterId.cardSecurityCodeMismatch, filterId.billingOrShippingAddressMismatch, filterId.riskyZipCode, filterId.suspectedFreightForwarderCheck, filterId.riskyEmailAddressDomainCheck, filterId.riskyBankIdentificationNumberCheck, filterId.riskyIpAddressRange, filterId.largeOrderNumber, filterId.totalPurchasePriceMinimum, filterId.ipAddressVelocity, filterId.paypalFraudModel,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (fe filterIdEnum) Value() uint8 {
	return fe.value_pdxjo8s5dbah
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (fe filterIdEnum) IntValue() int {
	return int(fe.value_pdxjo8s5dbah)
}

// Name returns the name of the variant as a string.
func (fe filterIdEnum) Name() string {
	switch fe.value_pdxjo8s5dbah {
	case 1:
		return "maximumTransactionAmount"
	case 2:
		return "unconfirmedAddress"
	case 3:
		return "countryMonitor"
	case 4:
		return "avsNoMatch"
	case 5:
		return "avsPartialMatch"
	case 6:
		return "avsUnavailableOrUnsupported"
	case 7:
		return "cardSecurityCodeMismatch"
	case 8:
		return "billingOrShippingAddressMismatch"
	case 9:
		return "riskyZipCode"
	case 10:
		return "suspectedFreightForwarderCheck"
	case 11:
		return "riskyEmailAddressDomainCheck"
	case 12:
		return "riskyBankIdentificationNumberCheck"
	case 13:
		return "riskyIpAddressRange"
	case 14:
		return "largeOrderNumber"
	case 15:
		return "totalPurchasePriceMinimum"
	case 16:
		return "ipAddressVelocity"
	case 17:
		return "paypalFraudModel"
	}

	return ""
}

// Type returns the variant's type name as a string
func (fe filterIdEnum) Type() string {
	return "filterIdEnum"
}

// Namespace returns the variant's namespace name as a string
func (fe filterIdEnum) Namespace() string {
	return "filterId"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (fe filterIdEnum) String() string {
	switch fe.value_pdxjo8s5dbah {
	case 1:
		return "MAXIMUM_TRANSACTION_AMOUNT"
	case 2:
		return "UNCONFIRMED_ADDRESS"
	case 3:
		return "COUNTRY_MONITOR"
	case 4:
		return "AVS_NO_MATCH"
	case 5:
		return "AVS_PARTIAL_MATCH"
	case 6:
		return "AVS_UNAVAILABLE_OR_UNSUPPORTED"
	case 7:
		return "CARD_SECURITY_CODE_MISMATCH"
	case 8:
		return "BILLING_OR_SHIPPING_ADDRESS_MISMATCH"
	case 9:
		return "RISKY_ZIP_CODE"
	case 10:
		return "SUSPECTED_FREIGHT_FORWARDER_CHECK"
	case 11:
		return "RISKY_EMAIL_ADDRESS_DOMAIN_CHECK"
	case 12:
		return "RISKY_BANK_IDENTIFICATION_NUMBER_CHECK"
	case 13:
		return "RISKY_IP_ADDRESS_RANGE"
	case 14:
		return "LARGE_ORDER_NUMBER"
	case 15:
		return "TOTAL_PURCHASE_PRICE_MINIMUM"
	case 16:
		return "IP_ADDRESS_VELOCITY"
	case 17:
		return "PAYPAL_FRAUD_MODEL"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (fe filterIdEnum) Description() string {
	switch fe.value_pdxjo8s5dbah {
	case 1:
		return "basic filter"
	case 2:
		return "basic filter"
	case 3:
		return "basic filter"
	case 4:
		return "Address Verification Service No Match (advanced filter)"
	case 5:
		return "Address Verification Service Partial Match (advanced filter)"
	case 6:
		return "Address Verification Service Unavailable or Not Supported (advanced filter)"
	case 7:
		return "advanced filter"
	case 8:
		return "advanced filter"
	case 9:
		return "high risk lists filter"
	case 10:
		return "high risk lists filter"
	case 11:
		return "high risk lists filter"
	case 12:
		return "high risk lists filter"
	case 13:
		return "high risk lists filter"
	case 14:
		return "transaction data filter"
	case 15:
		return "transaction data filter"
	case 16:
		return "transaction data filter"
	case 17:
		return "transaction data filter"
	}
	return ""
}

// JSON marshaling methods
func (fe filterIdEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(fe.IntValue())), nil
}

func (fe *filterIdEnum) UnmarshalJSON(b []byte) error {
	var n, err = strconv.ParseUint(string(b), 10, 64)
	if err != nil {
		return err
	}
	fe.value_pdxjo8s5dbah = uint8(n)
	return nil
}

/*****************************

normStatusEnum

******************************/

type normStatusEnum struct{ value_1q476orjhjwjr uint8 }

var normStatus = struct {
	unknown                   normStatusEnum
	unnormalizedUserPreferred normStatusEnum
	normalized                normStatusEnum
	unnormalized              normStatusEnum

	// Used to iterate in range loops
	Values [4]normStatusEnum
}{
	unknown:                   normStatusEnum{value_1q476orjhjwjr: 1},
	unnormalizedUserPreferred: normStatusEnum{value_1q476orjhjwjr: 2},
	normalized:                normStatusEnum{value_1q476orjhjwjr: 3},
	unnormalized:              normStatusEnum{value_1q476orjhjwjr: 4},
}

func init() {
	normStatus.Values = [4]normStatusEnum{
		normStatus.unknown, normStatus.unnormalizedUserPreferred, normStatus.normalized, normStatus.unnormalized,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (ne normStatusEnum) Value() uint8 {
	return ne.value_1q476orjhjwjr
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (ne normStatusEnum) IntValue() int {
	return int(ne.value_1q476orjhjwjr)
}

// Name returns the name of the variant as a string.
func (ne normStatusEnum) Name() string {
	switch ne.value_1q476orjhjwjr {
	case 1:
		return "unknown"
	case 2:
		return "unnormalizedUserPreferred"
	case 3:
		return "normalized"
	case 4:
		return "unnormalized"
	}

	return ""
}

// Type returns the variant's type name as a string
func (ne normStatusEnum) Type() string {
	return "normStatusEnum"
}

// Namespace returns the variant's namespace name as a string
func (ne normStatusEnum) Namespace() string {
	return "normStatus"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (ne normStatusEnum) String() string {
	switch ne.value_1q476orjhjwjr {
	case 1:
		return "UNKNOWN"
	case 2:
		return "UNNORMALIZED_USER_PREFERRED"
	case 3:
		return "NORMALIZED"
	case 4:
		return "UNNORMALIZED"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (ne normStatusEnum) Description() string {
	switch ne.value_1q476orjhjwjr {
	case 1:
		return "UNKNOWN"
	case 2:
		return "UNNORMALIZED_USER_PREFERRED"
	case 3:
		return "NORMALIZED"
	case 4:
		return "UNNORMALIZED"
	}
	return ""
}

// JSON marshaling methods
func (ne normStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(ne.String())), nil
}

func (ne *normStatusEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "UNKNOWN":
		ne.value_1q476orjhjwjr = 1
		return nil
	case "UNNORMALIZED_USER_PREFERRED":
		ne.value_1q476orjhjwjr = 2
		return nil
	case "NORMALIZED":
		ne.value_1q476orjhjwjr = 3
		return nil
	case "UNNORMALIZED":
		ne.value_1q476orjhjwjr = 4
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling normStatusEnum\n", s)
	}

	return nil
}

/*****************************

addressStatusEnum

******************************/

type addressStatusEnum struct{ value_1wu307jctxt5w uint8 }

var addressStatus = struct {
	confirmed   addressStatusEnum
	unconfirmed addressStatusEnum

	// Used to iterate in range loops
	Values [2]addressStatusEnum
}{
	confirmed:   addressStatusEnum{value_1wu307jctxt5w: 1},
	unconfirmed: addressStatusEnum{value_1wu307jctxt5w: 2},
}

func init() {
	addressStatus.Values = [2]addressStatusEnum{
		addressStatus.confirmed, addressStatus.unconfirmed,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (ae addressStatusEnum) Value() uint8 {
	return ae.value_1wu307jctxt5w
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (ae addressStatusEnum) IntValue() int {
	return int(ae.value_1wu307jctxt5w)
}

// Name returns the name of the variant as a string.
func (ae addressStatusEnum) Name() string {
	switch ae.value_1wu307jctxt5w {
	case 1:
		return "confirmed"
	case 2:
		return "unconfirmed"
	}

	return ""
}

// Type returns the variant's type name as a string
func (ae addressStatusEnum) Type() string {
	return "addressStatusEnum"
}

// Namespace returns the variant's namespace name as a string
func (ae addressStatusEnum) Namespace() string {
	return "addressStatus"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (ae addressStatusEnum) String() string {
	switch ae.value_1wu307jctxt5w {
	case 1:
		return "CONFIRMED"
	case 2:
		return "UNCONFIRMED"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (ae addressStatusEnum) Description() string {
	switch ae.value_1wu307jctxt5w {
	case 1:
		return "CONFIRMED"
	case 2:
		return "UNCONFIRMED"
	}
	return ""
}

// JSON marshaling methods
func (ae addressStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(ae.String())), nil
}

func (ae *addressStatusEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "CONFIRMED":
		ae.value_1wu307jctxt5w = 1
		return nil
	case "UNCONFIRMED":
		ae.value_1wu307jctxt5w = 2
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling addressStatusEnum\n", s)
	}

	return nil
}

/*****************************

AddressTypeEnum

******************************/

type AddressTypeEnum struct{ value_qpjj6ss7x2ku uint8 }

var AddressType = struct {
	Residential AddressTypeEnum
	Business    AddressTypeEnum
	Mailbox     AddressTypeEnum

	// Used to iterate in range loops
	Values [3]AddressTypeEnum
}{
	Residential: AddressTypeEnum{value_qpjj6ss7x2ku: 1},
	Business:    AddressTypeEnum{value_qpjj6ss7x2ku: 2},
	Mailbox:     AddressTypeEnum{value_qpjj6ss7x2ku: 3},
}

func init() {
	AddressType.Values = [3]AddressTypeEnum{
		AddressType.Residential, AddressType.Business, AddressType.Mailbox,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Ae AddressTypeEnum) Value() uint8 {
	return Ae.value_qpjj6ss7x2ku
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Ae AddressTypeEnum) IntValue() int {
	return int(Ae.value_qpjj6ss7x2ku)
}

// Name returns the name of the variant as a string.
func (Ae AddressTypeEnum) Name() string {
	switch Ae.value_qpjj6ss7x2ku {
	case 1:
		return "Residential"
	case 2:
		return "Business"
	case 3:
		return "Mailbox"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Ae AddressTypeEnum) Type() string {
	return "AddressTypeEnum"
}

// Namespace returns the variant's namespace name as a string
func (Ae AddressTypeEnum) Namespace() string {
	return "AddressType"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Ae AddressTypeEnum) String() string {
	switch Ae.value_qpjj6ss7x2ku {
	case 1:
		return "residential"
	case 2:
		return "business"
	case 3:
		return "mailbox"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Ae AddressTypeEnum) Description() string {
	switch Ae.value_qpjj6ss7x2ku {
	case 1:
		return "residential"
	case 2:
		return "business"
	case 3:
		return "mailbox"
	}
	return ""
}

// JSON marshaling methods
func (Ae AddressTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Ae.String())), nil
}

func (Ae *AddressTypeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "residential":
		Ae.value_qpjj6ss7x2ku = 1
		return nil
	case "business":
		Ae.value_qpjj6ss7x2ku = 2
		return nil
	case "mailbox":
		Ae.value_qpjj6ss7x2ku = 3
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling AddressTypeEnum\n", s)
	}

	return nil
}

/*****************************

PaymentMethodEnum

******************************/

type PaymentMethodEnum struct{ value_1x9oaunlkcrtw uint8 }

var PaymentMethod = struct {
	CreditCard PaymentMethodEnum
	PayPal     PaymentMethodEnum

	// Used to iterate in range loops
	Values [2]PaymentMethodEnum
}{
	CreditCard: PaymentMethodEnum{value_1x9oaunlkcrtw: 1},
	PayPal:     PaymentMethodEnum{value_1x9oaunlkcrtw: 2},
}

func init() {
	PaymentMethod.Values = [2]PaymentMethodEnum{
		PaymentMethod.CreditCard, PaymentMethod.PayPal,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Pe PaymentMethodEnum) Value() uint8 {
	return Pe.value_1x9oaunlkcrtw
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Pe PaymentMethodEnum) IntValue() int {
	return int(Pe.value_1x9oaunlkcrtw)
}

// Name returns the name of the variant as a string.
func (Pe PaymentMethodEnum) Name() string {
	switch Pe.value_1x9oaunlkcrtw {
	case 1:
		return "CreditCard"
	case 2:
		return "PayPal"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Pe PaymentMethodEnum) Type() string {
	return "PaymentMethodEnum"
}

// Namespace returns the variant's namespace name as a string
func (Pe PaymentMethodEnum) Namespace() string {
	return "PaymentMethod"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Pe PaymentMethodEnum) String() string {
	switch Pe.value_1x9oaunlkcrtw {
	case 1:
		return "credit_card"
	case 2:
		return "paypal"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Pe PaymentMethodEnum) Description() string {
	switch Pe.value_1x9oaunlkcrtw {
	case 1:
		return "credit_card"
	case 2:
		return "paypal"
	}
	return ""
}

// JSON marshaling methods
func (Pe PaymentMethodEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Pe.String())), nil
}

func (Pe *PaymentMethodEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "credit_card":
		Pe.value_1x9oaunlkcrtw = 1
		return nil
	case "paypal":
		Pe.value_1x9oaunlkcrtw = 2
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling PaymentMethodEnum\n", s)
	}

	return nil
}

/*****************************

TaxIdTypeEnum

******************************/

type TaxIdTypeEnum struct{ value_cgr1x0uhak8c uint8 }

var TaxIdType = struct {
	BrCpf  TaxIdTypeEnum
	BrCnpj TaxIdTypeEnum

	// Used to iterate in range loops
	Values [2]TaxIdTypeEnum
}{
	BrCpf:  TaxIdTypeEnum{value_cgr1x0uhak8c: 1},
	BrCnpj: TaxIdTypeEnum{value_cgr1x0uhak8c: 2},
}

func init() {
	TaxIdType.Values = [2]TaxIdTypeEnum{
		TaxIdType.BrCpf, TaxIdType.BrCnpj,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Te TaxIdTypeEnum) Value() uint8 {
	return Te.value_cgr1x0uhak8c
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Te TaxIdTypeEnum) IntValue() int {
	return int(Te.value_cgr1x0uhak8c)
}

// Name returns the name of the variant as a string.
func (Te TaxIdTypeEnum) Name() string {
	switch Te.value_cgr1x0uhak8c {
	case 1:
		return "BrCpf"
	case 2:
		return "BrCnpj"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Te TaxIdTypeEnum) Type() string {
	return "TaxIdTypeEnum"
}

// Namespace returns the variant's namespace name as a string
func (Te TaxIdTypeEnum) Namespace() string {
	return "TaxIdType"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Te TaxIdTypeEnum) String() string {
	switch Te.value_cgr1x0uhak8c {
	case 1:
		return "BR_CPF"
	case 2:
		return "BR_CNPJ"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Te TaxIdTypeEnum) Description() string {
	switch Te.value_cgr1x0uhak8c {
	case 1:
		return "BR_CPF"
	case 2:
		return "BR_CNPJ"
	}
	return ""
}

// JSON marshaling methods
func (Te TaxIdTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Te.String())), nil
}

func (Te *TaxIdTypeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "BR_CPF":
		Te.value_cgr1x0uhak8c = 1
		return nil
	case "BR_CNPJ":
		Te.value_cgr1x0uhak8c = 2
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling TaxIdTypeEnum\n", s)
	}

	return nil
}

/*****************************

CreditCardTypeEnum

******************************/

type CreditCardTypeEnum struct{ value_1htngm1l70qzj uint8 }

var CreditCardType = struct {
	Visa       CreditCardTypeEnum
	MasterCard CreditCardTypeEnum
	Discover   CreditCardTypeEnum
	Amex       CreditCardTypeEnum

	// Used to iterate in range loops
	Values [4]CreditCardTypeEnum
}{
	Visa:       CreditCardTypeEnum{value_1htngm1l70qzj: 1},
	MasterCard: CreditCardTypeEnum{value_1htngm1l70qzj: 2},
	Discover:   CreditCardTypeEnum{value_1htngm1l70qzj: 3},
	Amex:       CreditCardTypeEnum{value_1htngm1l70qzj: 4},
}

func init() {
	CreditCardType.Values = [4]CreditCardTypeEnum{
		CreditCardType.Visa, CreditCardType.MasterCard, CreditCardType.Discover, CreditCardType.Amex,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Ce CreditCardTypeEnum) Value() uint8 {
	return Ce.value_1htngm1l70qzj
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Ce CreditCardTypeEnum) IntValue() int {
	return int(Ce.value_1htngm1l70qzj)
}

// Name returns the name of the variant as a string.
func (Ce CreditCardTypeEnum) Name() string {
	switch Ce.value_1htngm1l70qzj {
	case 1:
		return "Visa"
	case 2:
		return "MasterCard"
	case 3:
		return "Discover"
	case 4:
		return "Amex"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Ce CreditCardTypeEnum) Type() string {
	return "CreditCardTypeEnum"
}

// Namespace returns the variant's namespace name as a string
func (Ce CreditCardTypeEnum) Namespace() string {
	return "CreditCardType"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Ce CreditCardTypeEnum) String() string {
	switch Ce.value_1htngm1l70qzj {
	case 1:
		return "visa"
	case 2:
		return "mastercard"
	case 3:
		return "discover"
	case 4:
		return "amex"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Ce CreditCardTypeEnum) Description() string {
	switch Ce.value_1htngm1l70qzj {
	case 1:
		return "visa"
	case 2:
		return "mastercard"
	case 3:
		return "discover"
	case 4:
		return "amex"
	}
	return ""
}

// JSON marshaling methods
func (Ce CreditCardTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Ce.String())), nil
}

func (Ce *CreditCardTypeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "visa":
		Ce.value_1htngm1l70qzj = 1
		return nil
	case "mastercard":
		Ce.value_1htngm1l70qzj = 2
		return nil
	case "discover":
		Ce.value_1htngm1l70qzj = 3
		return nil
	case "amex":
		Ce.value_1htngm1l70qzj = 4
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling CreditCardTypeEnum\n", s)
	}

	return nil
}

/*****************************

stateEnum

******************************/

type stateEnum struct{ value_yw0p0cg47f0m uint8 }

var state = struct {
	Created           stateEnum
	Approved          stateEnum
	Canceled          stateEnum
	InProgress        stateEnum
	Failed            stateEnum
	Pending           stateEnum
	Completed         stateEnum
	Refunded          stateEnum
	PartiallyRefunded stateEnum
	Expired           stateEnum
	Ok                stateEnum
	Authorized        stateEnum
	Captured          stateEnum
	PartiallyCaptured stateEnum
	Voided            stateEnum

	// Used to iterate in range loops
	Values [15]stateEnum
}{
	Created:           stateEnum{value_yw0p0cg47f0m: 1},
	Approved:          stateEnum{value_yw0p0cg47f0m: 2},
	Canceled:          stateEnum{value_yw0p0cg47f0m: 3},
	InProgress:        stateEnum{value_yw0p0cg47f0m: 4},
	Failed:            stateEnum{value_yw0p0cg47f0m: 5},
	Pending:           stateEnum{value_yw0p0cg47f0m: 6},
	Completed:         stateEnum{value_yw0p0cg47f0m: 7},
	Refunded:          stateEnum{value_yw0p0cg47f0m: 8},
	PartiallyRefunded: stateEnum{value_yw0p0cg47f0m: 9},
	Expired:           stateEnum{value_yw0p0cg47f0m: 10},
	Ok:                stateEnum{value_yw0p0cg47f0m: 11},
	Authorized:        stateEnum{value_yw0p0cg47f0m: 12},
	Captured:          stateEnum{value_yw0p0cg47f0m: 13},
	PartiallyCaptured: stateEnum{value_yw0p0cg47f0m: 14},
	Voided:            stateEnum{value_yw0p0cg47f0m: 15},
}

func init() {
	state.Values = [15]stateEnum{
		state.Created, state.Approved, state.Canceled, state.InProgress, state.Failed, state.Pending, state.Completed, state.Refunded, state.PartiallyRefunded, state.Expired, state.Ok, state.Authorized, state.Captured, state.PartiallyCaptured, state.Voided,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (se stateEnum) Value() uint8 {
	return se.value_yw0p0cg47f0m
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (se stateEnum) IntValue() int {
	return int(se.value_yw0p0cg47f0m)
}

// Name returns the name of the variant as a string.
func (se stateEnum) Name() string {
	switch se.value_yw0p0cg47f0m {
	case 1:
		return "Created"
	case 2:
		return "Approved"
	case 3:
		return "Canceled"
	case 4:
		return "InProgress"
	case 5:
		return "Failed"
	case 6:
		return "Pending"
	case 7:
		return "Completed"
	case 8:
		return "Refunded"
	case 9:
		return "PartiallyRefunded"
	case 10:
		return "Expired"
	case 11:
		return "Ok"
	case 12:
		return "Authorized"
	case 13:
		return "Captured"
	case 14:
		return "PartiallyCaptured"
	case 15:
		return "Voided"
	}

	return ""
}

// Type returns the variant's type name as a string
func (se stateEnum) Type() string {
	return "stateEnum"
}

// Namespace returns the variant's namespace name as a string
func (se stateEnum) Namespace() string {
	return "state"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (se stateEnum) String() string {
	switch se.value_yw0p0cg47f0m {
	case 1:
		return "created"
	case 2:
		return "approved"
	case 3:
		return "canceled"
	case 4:
		return "in_progress"
	case 5:
		return "failed"
	case 6:
		return "pending"
	case 7:
		return "completed"
	case 8:
		return "refunded"
	case 9:
		return "partially_refunded"
	case 10:
		return "expired"
	case 11:
		return "ok"
	case 12:
		return "authorized"
	case 13:
		return "captured"
	case 14:
		return "partially_captured"
	case 15:
		return "voided"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (se stateEnum) Description() string {
	switch se.value_yw0p0cg47f0m {
	case 1:
		return "created"
	case 2:
		return "approved"
	case 3:
		return "canceled"
	case 4:
		return "in_progress"
	case 5:
		return "failed"
	case 6:
		return "pending"
	case 7:
		return "completed"
	case 8:
		return "refunded"
	case 9:
		return "partially_refunded"
	case 10:
		return "expired"
	case 11:
		return "ok"
	case 12:
		return "authorized"
	case 13:
		return "captured"
	case 14:
		return "partially_captured"
	case 15:
		return "voided"
	}
	return ""
}

// JSON marshaling methods
func (se stateEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(se.String())), nil
}

func (se *stateEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "created":
		se.value_yw0p0cg47f0m = 1
		return nil
	case "approved":
		se.value_yw0p0cg47f0m = 2
		return nil
	case "canceled":
		se.value_yw0p0cg47f0m = 3
		return nil
	case "in_progress":
		se.value_yw0p0cg47f0m = 4
		return nil
	case "failed":
		se.value_yw0p0cg47f0m = 5
		return nil
	case "pending":
		se.value_yw0p0cg47f0m = 6
		return nil
	case "completed":
		se.value_yw0p0cg47f0m = 7
		return nil
	case "refunded":
		se.value_yw0p0cg47f0m = 8
		return nil
	case "partially_refunded":
		se.value_yw0p0cg47f0m = 9
		return nil
	case "expired":
		se.value_yw0p0cg47f0m = 10
		return nil
	case "ok":
		se.value_yw0p0cg47f0m = 11
		return nil
	case "authorized":
		se.value_yw0p0cg47f0m = 12
		return nil
	case "captured":
		se.value_yw0p0cg47f0m = 13
		return nil
	case "partially_captured":
		se.value_yw0p0cg47f0m = 14
		return nil
	case "voided":
		se.value_yw0p0cg47f0m = 15
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling stateEnum\n", s)
	}

	return nil
}

/*****************************

reasonCodeEnum

******************************/

type reasonCodeEnum struct{ value_1dvv8satff3lw uint8 }

var reasonCode = struct {
	chargeback                              reasonCodeEnum
	guarantee                               reasonCodeEnum
	buyerComplaint                          reasonCodeEnum
	refundCode                              reasonCodeEnum
	unconfirmedShippingAddress              reasonCodeEnum
	echeckCode                              reasonCodeEnum
	internationalWithdrawal                 reasonCodeEnum
	receivingPreferenceMandatesManualAction reasonCodeEnum
	paymentReview                           reasonCodeEnum
	regulatoryReview                        reasonCodeEnum
	unilateral                              reasonCodeEnum
	verificationRequired                    reasonCodeEnum

	// Used to iterate in range loops
	Values [12]reasonCodeEnum
}{
	chargeback:                              reasonCodeEnum{value_1dvv8satff3lw: 1},
	guarantee:                               reasonCodeEnum{value_1dvv8satff3lw: 2},
	buyerComplaint:                          reasonCodeEnum{value_1dvv8satff3lw: 3},
	refundCode:                              reasonCodeEnum{value_1dvv8satff3lw: 4},
	unconfirmedShippingAddress:              reasonCodeEnum{value_1dvv8satff3lw: 5},
	echeckCode:                              reasonCodeEnum{value_1dvv8satff3lw: 6},
	internationalWithdrawal:                 reasonCodeEnum{value_1dvv8satff3lw: 7},
	receivingPreferenceMandatesManualAction: reasonCodeEnum{value_1dvv8satff3lw: 8},
	paymentReview:                           reasonCodeEnum{value_1dvv8satff3lw: 9},
	regulatoryReview:                        reasonCodeEnum{value_1dvv8satff3lw: 10},
	unilateral:                              reasonCodeEnum{value_1dvv8satff3lw: 11},
	verificationRequired:                    reasonCodeEnum{value_1dvv8satff3lw: 12},
}

func init() {
	reasonCode.Values = [12]reasonCodeEnum{
		reasonCode.chargeback, reasonCode.guarantee, reasonCode.buyerComplaint, reasonCode.refundCode, reasonCode.unconfirmedShippingAddress, reasonCode.echeckCode, reasonCode.internationalWithdrawal, reasonCode.receivingPreferenceMandatesManualAction, reasonCode.paymentReview, reasonCode.regulatoryReview, reasonCode.unilateral, reasonCode.verificationRequired,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (re reasonCodeEnum) Value() uint8 {
	return re.value_1dvv8satff3lw
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (re reasonCodeEnum) IntValue() int {
	return int(re.value_1dvv8satff3lw)
}

// Name returns the name of the variant as a string.
func (re reasonCodeEnum) Name() string {
	switch re.value_1dvv8satff3lw {
	case 1:
		return "chargeback"
	case 2:
		return "guarantee"
	case 3:
		return "buyerComplaint"
	case 4:
		return "refundCode"
	case 5:
		return "unconfirmedShippingAddress"
	case 6:
		return "echeckCode"
	case 7:
		return "internationalWithdrawal"
	case 8:
		return "receivingPreferenceMandatesManualAction"
	case 9:
		return "paymentReview"
	case 10:
		return "regulatoryReview"
	case 11:
		return "unilateral"
	case 12:
		return "verificationRequired"
	}

	return ""
}

// Type returns the variant's type name as a string
func (re reasonCodeEnum) Type() string {
	return "reasonCodeEnum"
}

// Namespace returns the variant's namespace name as a string
func (re reasonCodeEnum) Namespace() string {
	return "reasonCode"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (re reasonCodeEnum) String() string {
	switch re.value_1dvv8satff3lw {
	case 1:
		return "CHARGEBACK"
	case 2:
		return "GUARANTEE"
	case 3:
		return "BUYER_COMPLAINT"
	case 4:
		return "REFUND"
	case 5:
		return "UNCONFIRMED_SHIPPING_ADDRESS"
	case 6:
		return "ECHECK"
	case 7:
		return "INTERNATIONAL_WITHDRAWAL"
	case 8:
		return "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION"
	case 9:
		return "PAYMENT_REVIEW"
	case 10:
		return "REGULATORY_REVIEW"
	case 11:
		return "UNILATERAL"
	case 12:
		return "VERIFICATION_REQUIRED"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (re reasonCodeEnum) Description() string {
	switch re.value_1dvv8satff3lw {
	case 1:
		return "CHARGEBACK"
	case 2:
		return "GUARANTEE"
	case 3:
		return "BUYER_COMPLAINT"
	case 4:
		return "REFUND"
	case 5:
		return "UNCONFIRMED_SHIPPING_ADDRESS"
	case 6:
		return "ECHECK"
	case 7:
		return "INTERNATIONAL_WITHDRAWAL"
	case 8:
		return "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION"
	case 9:
		return "PAYMENT_REVIEW"
	case 10:
		return "REGULATORY_REVIEW"
	case 11:
		return "UNILATERAL"
	case 12:
		return "VERIFICATION_REQUIRED"
	}
	return ""
}

// JSON marshaling methods
func (re reasonCodeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(re.String())), nil
}

func (re *reasonCodeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "CHARGEBACK":
		re.value_1dvv8satff3lw = 1
		return nil
	case "GUARANTEE":
		re.value_1dvv8satff3lw = 2
		return nil
	case "BUYER_COMPLAINT":
		re.value_1dvv8satff3lw = 3
		return nil
	case "REFUND":
		re.value_1dvv8satff3lw = 4
		return nil
	case "UNCONFIRMED_SHIPPING_ADDRESS":
		re.value_1dvv8satff3lw = 5
		return nil
	case "ECHECK":
		re.value_1dvv8satff3lw = 6
		return nil
	case "INTERNATIONAL_WITHDRAWAL":
		re.value_1dvv8satff3lw = 7
		return nil
	case "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION":
		re.value_1dvv8satff3lw = 8
		return nil
	case "PAYMENT_REVIEW":
		re.value_1dvv8satff3lw = 9
		return nil
	case "REGULATORY_REVIEW":
		re.value_1dvv8satff3lw = 10
		return nil
	case "UNILATERAL":
		re.value_1dvv8satff3lw = 11
		return nil
	case "VERIFICATION_REQUIRED":
		re.value_1dvv8satff3lw = 12
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling reasonCodeEnum\n", s)
	}

	return nil
}

/*****************************

protectionEligEnum

******************************/

type protectionEligEnum struct{ value_sjs5lvzz2zm3 uint8 }

var protectionElig = struct {
	eligible          protectionEligEnum
	partiallyEligible protectionEligEnum
	ineligibile       protectionEligEnum

	// Used to iterate in range loops
	Values [3]protectionEligEnum
}{
	eligible:          protectionEligEnum{value_sjs5lvzz2zm3: 1},
	partiallyEligible: protectionEligEnum{value_sjs5lvzz2zm3: 2},
	ineligibile:       protectionEligEnum{value_sjs5lvzz2zm3: 3},
}

func init() {
	protectionElig.Values = [3]protectionEligEnum{
		protectionElig.eligible, protectionElig.partiallyEligible, protectionElig.ineligibile,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (pe protectionEligEnum) Value() uint8 {
	return pe.value_sjs5lvzz2zm3
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (pe protectionEligEnum) IntValue() int {
	return int(pe.value_sjs5lvzz2zm3)
}

// Name returns the name of the variant as a string.
func (pe protectionEligEnum) Name() string {
	switch pe.value_sjs5lvzz2zm3 {
	case 1:
		return "eligible"
	case 2:
		return "partiallyEligible"
	case 3:
		return "ineligibile"
	}

	return ""
}

// Type returns the variant's type name as a string
func (pe protectionEligEnum) Type() string {
	return "protectionEligEnum"
}

// Namespace returns the variant's namespace name as a string
func (pe protectionEligEnum) Namespace() string {
	return "protectionElig"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (pe protectionEligEnum) String() string {
	switch pe.value_sjs5lvzz2zm3 {
	case 1:
		return "ELIGIBLE"
	case 2:
		return "PARTIALLY_ELIGIBLE"
	case 3:
		return "INELIGIBLE"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (pe protectionEligEnum) Description() string {
	switch pe.value_sjs5lvzz2zm3 {
	case 1:
		return "Merchant is protected by PayPal's Seller Protection Policy for Unauthorized. Payments and Item Not Received."
	case 2:
		return "Merchant is protected by PayPal's Seller Protection Policy for Item Not Received or Unauthorized Payments. Refer to protection_eligibility_type for specifics."
	case 3:
		return "Merchant is not protected under the Seller Protection Policy."
	}
	return ""
}

// JSON marshaling methods
func (pe protectionEligEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(pe.String())), nil
}

func (pe *protectionEligEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "ELIGIBLE":
		pe.value_sjs5lvzz2zm3 = 1
		return nil
	case "PARTIALLY_ELIGIBLE":
		pe.value_sjs5lvzz2zm3 = 2
		return nil
	case "INELIGIBLE":
		pe.value_sjs5lvzz2zm3 = 3
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling protectionEligEnum\n", s)
	}

	return nil
}

/*****************************

protectionEligTypeEnum

******************************/

type protectionEligTypeEnum struct{ value_122u1b5ov1vty uint8 }

var protectionEligType = struct {
	itemNotReceivedEligible     protectionEligTypeEnum
	unauthorizedPaymentEligible protectionEligTypeEnum

	// Used to iterate in range loops
	Values [2]protectionEligTypeEnum
}{
	itemNotReceivedEligible:     protectionEligTypeEnum{value_122u1b5ov1vty: 1},
	unauthorizedPaymentEligible: protectionEligTypeEnum{value_122u1b5ov1vty: 2},
}

func init() {
	protectionEligType.Values = [2]protectionEligTypeEnum{
		protectionEligType.itemNotReceivedEligible, protectionEligType.unauthorizedPaymentEligible,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (pe protectionEligTypeEnum) Value() uint8 {
	return pe.value_122u1b5ov1vty
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (pe protectionEligTypeEnum) IntValue() int {
	return int(pe.value_122u1b5ov1vty)
}

// Name returns the name of the variant as a string.
func (pe protectionEligTypeEnum) Name() string {
	switch pe.value_122u1b5ov1vty {
	case 1:
		return "itemNotReceivedEligible"
	case 2:
		return "unauthorizedPaymentEligible"
	}

	return ""
}

// Type returns the variant's type name as a string
func (pe protectionEligTypeEnum) Type() string {
	return "protectionEligTypeEnum"
}

// Namespace returns the variant's namespace name as a string
func (pe protectionEligTypeEnum) Namespace() string {
	return "protectionEligType"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (pe protectionEligTypeEnum) String() string {
	switch pe.value_122u1b5ov1vty {
	case 1:
		return "ITEM_NOT_RECEIVED_ELIGIBLE"
	case 2:
		return "UNAUTHORIZED_PAYMENT_ELIGIBLE"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (pe protectionEligTypeEnum) Description() string {
	switch pe.value_122u1b5ov1vty {
	case 1:
		return "Sellers are protected against claims for items not received."
	case 2:
		return "Sellers are protected against claims for unauthorized payments."
	}
	return ""
}

// JSON marshaling methods
func (pe protectionEligTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(pe.String())), nil
}

func (pe *protectionEligTypeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "ITEM_NOT_RECEIVED_ELIGIBLE":
		pe.value_122u1b5ov1vty = 1
		return nil
	case "UNAUTHORIZED_PAYMENT_ELIGIBLE":
		pe.value_122u1b5ov1vty = 2
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling protectionEligTypeEnum\n", s)
	}

	return nil
}

/*****************************

paymentModeEnum

******************************/

type paymentModeEnum struct{ value_15l3p75wvg7ru uint8 }

var paymentMode = struct {
	instantTransfer    paymentModeEnum
	manualBankTransfer paymentModeEnum
	delayedTransfer    paymentModeEnum
	echeck             paymentModeEnum

	// Used to iterate in range loops
	Values [4]paymentModeEnum
}{
	instantTransfer:    paymentModeEnum{value_15l3p75wvg7ru: 1},
	manualBankTransfer: paymentModeEnum{value_15l3p75wvg7ru: 2},
	delayedTransfer:    paymentModeEnum{value_15l3p75wvg7ru: 3},
	echeck:             paymentModeEnum{value_15l3p75wvg7ru: 4},
}

func init() {
	paymentMode.Values = [4]paymentModeEnum{
		paymentMode.instantTransfer, paymentMode.manualBankTransfer, paymentMode.delayedTransfer, paymentMode.echeck,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (pe paymentModeEnum) Value() uint8 {
	return pe.value_15l3p75wvg7ru
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (pe paymentModeEnum) IntValue() int {
	return int(pe.value_15l3p75wvg7ru)
}

// Name returns the name of the variant as a string.
func (pe paymentModeEnum) Name() string {
	switch pe.value_15l3p75wvg7ru {
	case 1:
		return "instantTransfer"
	case 2:
		return "manualBankTransfer"
	case 3:
		return "delayedTransfer"
	case 4:
		return "echeck"
	}

	return ""
}

// Type returns the variant's type name as a string
func (pe paymentModeEnum) Type() string {
	return "paymentModeEnum"
}

// Namespace returns the variant's namespace name as a string
func (pe paymentModeEnum) Namespace() string {
	return "paymentMode"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (pe paymentModeEnum) String() string {
	switch pe.value_15l3p75wvg7ru {
	case 1:
		return "INSTANT_TRANSFER"
	case 2:
		return "MANUAL_BANK_TRANSFER"
	case 3:
		return "DELAYED_TRANSFER"
	case 4:
		return "ECHECK"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (pe paymentModeEnum) Description() string {
	switch pe.value_15l3p75wvg7ru {
	case 1:
		return "INSTANT_TRANSFER"
	case 2:
		return "MANUAL_BANK_TRANSFER"
	case 3:
		return "DELAYED_TRANSFER"
	case 4:
		return "ECHECK"
	}
	return ""
}

// JSON marshaling methods
func (pe paymentModeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(pe.String())), nil
}

func (pe *paymentModeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "INSTANT_TRANSFER":
		pe.value_15l3p75wvg7ru = 1
		return nil
	case "MANUAL_BANK_TRANSFER":
		pe.value_15l3p75wvg7ru = 2
		return nil
	case "DELAYED_TRANSFER":
		pe.value_15l3p75wvg7ru = 3
		return nil
	case "ECHECK":
		pe.value_15l3p75wvg7ru = 4
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling paymentModeEnum\n", s)
	}

	return nil
}

/*****************************

pendingReasonEnum

******************************/

type pendingReasonEnum struct{ value_183o3gr3d5gjx uint8 }

var pendingReason = struct {
	payerShippingUnconfirmed pendingReasonEnum
	multiCurrency            pendingReasonEnum
	riskReview               pendingReasonEnum
	regulatoryReview         pendingReasonEnum
	verificationRequired     pendingReasonEnum
	orderPending             pendingReasonEnum
	otherPending             pendingReasonEnum

	// Used to iterate in range loops
	Values [7]pendingReasonEnum
}{
	payerShippingUnconfirmed: pendingReasonEnum{value_183o3gr3d5gjx: 1},
	multiCurrency:            pendingReasonEnum{value_183o3gr3d5gjx: 2},
	riskReview:               pendingReasonEnum{value_183o3gr3d5gjx: 3},
	regulatoryReview:         pendingReasonEnum{value_183o3gr3d5gjx: 4},
	verificationRequired:     pendingReasonEnum{value_183o3gr3d5gjx: 5},
	orderPending:             pendingReasonEnum{value_183o3gr3d5gjx: 6},
	otherPending:             pendingReasonEnum{value_183o3gr3d5gjx: 7},
}

func init() {
	pendingReason.Values = [7]pendingReasonEnum{
		pendingReason.payerShippingUnconfirmed, pendingReason.multiCurrency, pendingReason.riskReview, pendingReason.regulatoryReview, pendingReason.verificationRequired, pendingReason.orderPending, pendingReason.otherPending,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (pe pendingReasonEnum) Value() uint8 {
	return pe.value_183o3gr3d5gjx
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (pe pendingReasonEnum) IntValue() int {
	return int(pe.value_183o3gr3d5gjx)
}

// Name returns the name of the variant as a string.
func (pe pendingReasonEnum) Name() string {
	switch pe.value_183o3gr3d5gjx {
	case 1:
		return "payerShippingUnconfirmed"
	case 2:
		return "multiCurrency"
	case 3:
		return "riskReview"
	case 4:
		return "regulatoryReview"
	case 5:
		return "verificationRequired"
	case 6:
		return "orderPending"
	case 7:
		return "otherPending"
	}

	return ""
}

// Type returns the variant's type name as a string
func (pe pendingReasonEnum) Type() string {
	return "pendingReasonEnum"
}

// Namespace returns the variant's namespace name as a string
func (pe pendingReasonEnum) Namespace() string {
	return "pendingReason"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (pe pendingReasonEnum) String() string {
	switch pe.value_183o3gr3d5gjx {
	case 1:
		return "PAYER-SHIPPING-UNCONFIRMED"
	case 2:
		return "MULTI-CURRENCY"
	case 3:
		return "RISK-REVIEW"
	case 4:
		return "REGULATORY-REVIEW"
	case 5:
		return "VERIFICATION-REQUIRED"
	case 6:
		return "ORDER"
	case 7:
		return "OTHER"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (pe pendingReasonEnum) Description() string {
	switch pe.value_183o3gr3d5gjx {
	case 1:
		return "PAYER-SHIPPING-UNCONFIRMED"
	case 2:
		return "MULTI-CURRENCY"
	case 3:
		return "RISK-REVIEW"
	case 4:
		return "REGULATORY-REVIEW"
	case 5:
		return "VERIFICATION-REQUIRED"
	case 6:
		return "ORDER"
	case 7:
		return "OTHER"
	}
	return ""
}

// JSON marshaling methods
func (pe pendingReasonEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(pe.String())), nil
}

func (pe *pendingReasonEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "PAYER-SHIPPING-UNCONFIRMED":
		pe.value_183o3gr3d5gjx = 1
		return nil
	case "MULTI-CURRENCY":
		pe.value_183o3gr3d5gjx = 2
		return nil
	case "RISK-REVIEW":
		pe.value_183o3gr3d5gjx = 3
		return nil
	case "REGULATORY-REVIEW":
		pe.value_183o3gr3d5gjx = 4
		return nil
	case "VERIFICATION-REQUIRED":
		pe.value_183o3gr3d5gjx = 5
		return nil
	case "ORDER":
		pe.value_183o3gr3d5gjx = 6
		return nil
	case "OTHER":
		pe.value_183o3gr3d5gjx = 7
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling pendingReasonEnum\n", s)
	}

	return nil
}

/*****************************

CurrencyTypeEnum

******************************/

type CurrencyTypeEnum struct{ value_1khn036i9k4oz uint8 }

var CurrencyType = struct {
	AUD CurrencyTypeEnum
	BRL CurrencyTypeEnum
	CAD CurrencyTypeEnum
	CZK CurrencyTypeEnum
	DKK CurrencyTypeEnum
	EUR CurrencyTypeEnum
	HKD CurrencyTypeEnum
	HUF CurrencyTypeEnum
	ILS CurrencyTypeEnum
	JPY CurrencyTypeEnum
	MYR CurrencyTypeEnum
	MXN CurrencyTypeEnum
	TWD CurrencyTypeEnum
	NZD CurrencyTypeEnum
	NOK CurrencyTypeEnum
	PHP CurrencyTypeEnum
	PLN CurrencyTypeEnum
	GBP CurrencyTypeEnum
	SGD CurrencyTypeEnum
	SEK CurrencyTypeEnum
	CHF CurrencyTypeEnum
	THB CurrencyTypeEnum
	TRY CurrencyTypeEnum
	USD CurrencyTypeEnum

	// Used to iterate in range loops
	Values [24]CurrencyTypeEnum
}{
	AUD: CurrencyTypeEnum{value_1khn036i9k4oz: 1},
	BRL: CurrencyTypeEnum{value_1khn036i9k4oz: 2},
	CAD: CurrencyTypeEnum{value_1khn036i9k4oz: 3},
	CZK: CurrencyTypeEnum{value_1khn036i9k4oz: 4},
	DKK: CurrencyTypeEnum{value_1khn036i9k4oz: 5},
	EUR: CurrencyTypeEnum{value_1khn036i9k4oz: 6},
	HKD: CurrencyTypeEnum{value_1khn036i9k4oz: 7},
	HUF: CurrencyTypeEnum{value_1khn036i9k4oz: 8},
	ILS: CurrencyTypeEnum{value_1khn036i9k4oz: 9},
	JPY: CurrencyTypeEnum{value_1khn036i9k4oz: 10},
	MYR: CurrencyTypeEnum{value_1khn036i9k4oz: 11},
	MXN: CurrencyTypeEnum{value_1khn036i9k4oz: 12},
	TWD: CurrencyTypeEnum{value_1khn036i9k4oz: 13},
	NZD: CurrencyTypeEnum{value_1khn036i9k4oz: 14},
	NOK: CurrencyTypeEnum{value_1khn036i9k4oz: 15},
	PHP: CurrencyTypeEnum{value_1khn036i9k4oz: 16},
	PLN: CurrencyTypeEnum{value_1khn036i9k4oz: 17},
	GBP: CurrencyTypeEnum{value_1khn036i9k4oz: 18},
	SGD: CurrencyTypeEnum{value_1khn036i9k4oz: 19},
	SEK: CurrencyTypeEnum{value_1khn036i9k4oz: 20},
	CHF: CurrencyTypeEnum{value_1khn036i9k4oz: 21},
	THB: CurrencyTypeEnum{value_1khn036i9k4oz: 22},
	TRY: CurrencyTypeEnum{value_1khn036i9k4oz: 23},
	USD: CurrencyTypeEnum{value_1khn036i9k4oz: 24},
}

func init() {
	CurrencyType.Values = [24]CurrencyTypeEnum{
		CurrencyType.AUD, CurrencyType.BRL, CurrencyType.CAD, CurrencyType.CZK, CurrencyType.DKK, CurrencyType.EUR, CurrencyType.HKD, CurrencyType.HUF, CurrencyType.ILS, CurrencyType.JPY, CurrencyType.MYR, CurrencyType.MXN, CurrencyType.TWD, CurrencyType.NZD, CurrencyType.NOK, CurrencyType.PHP, CurrencyType.PLN, CurrencyType.GBP, CurrencyType.SGD, CurrencyType.SEK, CurrencyType.CHF, CurrencyType.THB, CurrencyType.TRY, CurrencyType.USD,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Ce CurrencyTypeEnum) Value() uint8 {
	return Ce.value_1khn036i9k4oz
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Ce CurrencyTypeEnum) IntValue() int {
	return int(Ce.value_1khn036i9k4oz)
}

// Name returns the name of the variant as a string.
func (Ce CurrencyTypeEnum) Name() string {
	switch Ce.value_1khn036i9k4oz {
	case 1:
		return "AUD"
	case 2:
		return "BRL"
	case 3:
		return "CAD"
	case 4:
		return "CZK"
	case 5:
		return "DKK"
	case 6:
		return "EUR"
	case 7:
		return "HKD"
	case 8:
		return "HUF"
	case 9:
		return "ILS"
	case 10:
		return "JPY"
	case 11:
		return "MYR"
	case 12:
		return "MXN"
	case 13:
		return "TWD"
	case 14:
		return "NZD"
	case 15:
		return "NOK"
	case 16:
		return "PHP"
	case 17:
		return "PLN"
	case 18:
		return "GBP"
	case 19:
		return "SGD"
	case 20:
		return "SEK"
	case 21:
		return "CHF"
	case 22:
		return "THB"
	case 23:
		return "TRY"
	case 24:
		return "USD"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Ce CurrencyTypeEnum) Type() string {
	return "CurrencyTypeEnum"
}

// Namespace returns the variant's namespace name as a string
func (Ce CurrencyTypeEnum) Namespace() string {
	return "CurrencyType"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Ce CurrencyTypeEnum) String() string {
	switch Ce.value_1khn036i9k4oz {
	case 1:
		return "AUD"
	case 2:
		return "BRL"
	case 3:
		return "CAD"
	case 4:
		return "CZK"
	case 5:
		return "DKK"
	case 6:
		return "EUR"
	case 7:
		return "HKD"
	case 8:
		return "HUF"
	case 9:
		return "ILS"
	case 10:
		return "JPY"
	case 11:
		return "MYR"
	case 12:
		return "MXN"
	case 13:
		return "TWD"
	case 14:
		return "NZD"
	case 15:
		return "NOK"
	case 16:
		return "PHP"
	case 17:
		return "PLN"
	case 18:
		return "GBP"
	case 19:
		return "SGD"
	case 20:
		return "SEK"
	case 21:
		return "CHF"
	case 22:
		return "THB"
	case 23:
		return "TRY"
	case 24:
		return "USD"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Ce CurrencyTypeEnum) Description() string {
	switch Ce.value_1khn036i9k4oz {
	case 1:
		return "Australian dollar"
	case 2:
		return "Brazilian real**"
	case 3:
		return "Canadian dollar"
	case 4:
		return "Czech koruna"
	case 5:
		return "Danish krone"
	case 6:
		return "Euro"
	case 7:
		return "Hong Kong dollar"
	case 8:
		return "Hungarian forint"
	case 9:
		return "Israeli new shekel"
	case 10:
		return "Japanese yen*"
	case 11:
		return "Malaysian ringgit**"
	case 12:
		return "Mexican peso"
	case 13:
		return "New Taiwan dollar*"
	case 14:
		return "New Zealand dollar"
	case 15:
		return "Norwegian krone"
	case 16:
		return "Philippine peso"
	case 17:
		return "Polish złoty"
	case 18:
		return "Pound sterling"
	case 19:
		return "Singapore dollar"
	case 20:
		return "Swedish krona"
	case 21:
		return "Swiss franc"
	case 22:
		return "Thai baht"
	case 23:
		return "Turkish lira**"
	case 24:
		return "United States dollar"
	}
	return ""
}

// JSON marshaling methods
func (Ce CurrencyTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Ce.String())), nil
}

func (Ce *CurrencyTypeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "AUD":
		Ce.value_1khn036i9k4oz = 1
		return nil
	case "BRL":
		Ce.value_1khn036i9k4oz = 2
		return nil
	case "CAD":
		Ce.value_1khn036i9k4oz = 3
		return nil
	case "CZK":
		Ce.value_1khn036i9k4oz = 4
		return nil
	case "DKK":
		Ce.value_1khn036i9k4oz = 5
		return nil
	case "EUR":
		Ce.value_1khn036i9k4oz = 6
		return nil
	case "HKD":
		Ce.value_1khn036i9k4oz = 7
		return nil
	case "HUF":
		Ce.value_1khn036i9k4oz = 8
		return nil
	case "ILS":
		Ce.value_1khn036i9k4oz = 9
		return nil
	case "JPY":
		Ce.value_1khn036i9k4oz = 10
		return nil
	case "MYR":
		Ce.value_1khn036i9k4oz = 11
		return nil
	case "MXN":
		Ce.value_1khn036i9k4oz = 12
		return nil
	case "TWD":
		Ce.value_1khn036i9k4oz = 13
		return nil
	case "NZD":
		Ce.value_1khn036i9k4oz = 14
		return nil
	case "NOK":
		Ce.value_1khn036i9k4oz = 15
		return nil
	case "PHP":
		Ce.value_1khn036i9k4oz = 16
		return nil
	case "PLN":
		Ce.value_1khn036i9k4oz = 17
		return nil
	case "GBP":
		Ce.value_1khn036i9k4oz = 18
		return nil
	case "SGD":
		Ce.value_1khn036i9k4oz = 19
		return nil
	case "SEK":
		Ce.value_1khn036i9k4oz = 20
		return nil
	case "CHF":
		Ce.value_1khn036i9k4oz = 21
		return nil
	case "THB":
		Ce.value_1khn036i9k4oz = 22
		return nil
	case "TRY":
		Ce.value_1khn036i9k4oz = 23
		return nil
	case "USD":
		Ce.value_1khn036i9k4oz = 24
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling CurrencyTypeEnum\n", s)
	}

	return nil
}

/*****************************

CountryCodeEnum

******************************/

type CountryCodeEnum struct{ value_1x0zlez3dcfaz uint8 }

var CountryCode = struct {
	AL CountryCodeEnum
	DZ CountryCodeEnum
	AD CountryCodeEnum
	AO CountryCodeEnum
	AI CountryCodeEnum
	AG CountryCodeEnum
	AR CountryCodeEnum
	AM CountryCodeEnum
	AW CountryCodeEnum
	AU CountryCodeEnum
	AT CountryCodeEnum
	AZ CountryCodeEnum
	BS CountryCodeEnum
	BH CountryCodeEnum
	BB CountryCodeEnum
	BE CountryCodeEnum
	BZ CountryCodeEnum
	BJ CountryCodeEnum
	BM CountryCodeEnum
	BT CountryCodeEnum
	BO CountryCodeEnum
	BA CountryCodeEnum
	BW CountryCodeEnum
	BR CountryCodeEnum
	BN CountryCodeEnum
	BG CountryCodeEnum
	BF CountryCodeEnum
	BI CountryCodeEnum
	KH CountryCodeEnum
	CA CountryCodeEnum
	CV CountryCodeEnum
	KY CountryCodeEnum
	TD CountryCodeEnum
	CL CountryCodeEnum
	CN CountryCodeEnum
	C2 CountryCodeEnum
	CO CountryCodeEnum
	KM CountryCodeEnum
	CD CountryCodeEnum
	CG CountryCodeEnum
	CK CountryCodeEnum
	CR CountryCodeEnum
	HR CountryCodeEnum
	CY CountryCodeEnum
	CZ CountryCodeEnum
	DK CountryCodeEnum
	DJ CountryCodeEnum
	DM CountryCodeEnum
	DO CountryCodeEnum
	EC CountryCodeEnum
	EG CountryCodeEnum
	SV CountryCodeEnum
	ER CountryCodeEnum
	EE CountryCodeEnum
	ET CountryCodeEnum
	FK CountryCodeEnum
	FJ CountryCodeEnum
	FI CountryCodeEnum
	FR CountryCodeEnum
	GF CountryCodeEnum
	PF CountryCodeEnum
	GA CountryCodeEnum
	GM CountryCodeEnum
	GE CountryCodeEnum
	DE CountryCodeEnum
	GI CountryCodeEnum
	GR CountryCodeEnum
	GL CountryCodeEnum
	GD CountryCodeEnum
	GP CountryCodeEnum
	GU CountryCodeEnum
	GT CountryCodeEnum
	GN CountryCodeEnum
	GW CountryCodeEnum
	GY CountryCodeEnum
	VA CountryCodeEnum
	HN CountryCodeEnum
	HK CountryCodeEnum
	HU CountryCodeEnum
	IS CountryCodeEnum
	IN CountryCodeEnum
	ID CountryCodeEnum
	IE CountryCodeEnum
	IL CountryCodeEnum
	IT CountryCodeEnum
	JM CountryCodeEnum
	JP CountryCodeEnum
	JO CountryCodeEnum
	KZ CountryCodeEnum
	KE CountryCodeEnum
	KI CountryCodeEnum
	KR CountryCodeEnum
	KW CountryCodeEnum
	KG CountryCodeEnum
	LA CountryCodeEnum
	LV CountryCodeEnum
	LS CountryCodeEnum
	LI CountryCodeEnum
	LT CountryCodeEnum
	LU CountryCodeEnum
	MG CountryCodeEnum
	MW CountryCodeEnum
	MY CountryCodeEnum
	MV CountryCodeEnum
	ML CountryCodeEnum
	MT CountryCodeEnum
	MH CountryCodeEnum
	MQ CountryCodeEnum
	MR CountryCodeEnum
	MU CountryCodeEnum
	YT CountryCodeEnum
	MX CountryCodeEnum
	FM CountryCodeEnum
	MN CountryCodeEnum
	MS CountryCodeEnum
	MA CountryCodeEnum
	MZ CountryCodeEnum
	NA CountryCodeEnum
	NR CountryCodeEnum
	NP CountryCodeEnum
	NL CountryCodeEnum
	AN CountryCodeEnum
	NC CountryCodeEnum
	NZ CountryCodeEnum
	NI CountryCodeEnum
	NE CountryCodeEnum
	NU CountryCodeEnum
	NF CountryCodeEnum
	NO CountryCodeEnum
	OM CountryCodeEnum
	PW CountryCodeEnum
	PA CountryCodeEnum
	PG CountryCodeEnum
	PE CountryCodeEnum
	PH CountryCodeEnum
	PN CountryCodeEnum
	PL CountryCodeEnum
	PT CountryCodeEnum
	QA CountryCodeEnum
	RE CountryCodeEnum
	RO CountryCodeEnum
	RU CountryCodeEnum
	RW CountryCodeEnum
	SH CountryCodeEnum
	KN CountryCodeEnum
	LC CountryCodeEnum
	PM CountryCodeEnum
	VC CountryCodeEnum
	WS CountryCodeEnum
	SM CountryCodeEnum
	ST CountryCodeEnum
	SA CountryCodeEnum
	SN CountryCodeEnum
	RS CountryCodeEnum
	SC CountryCodeEnum
	SL CountryCodeEnum
	SG CountryCodeEnum
	SK CountryCodeEnum
	SI CountryCodeEnum
	SB CountryCodeEnum
	SO CountryCodeEnum
	ZA CountryCodeEnum
	ES CountryCodeEnum
	LK CountryCodeEnum
	SR CountryCodeEnum
	SJ CountryCodeEnum
	SZ CountryCodeEnum
	SE CountryCodeEnum
	CH CountryCodeEnum
	TW CountryCodeEnum
	TJ CountryCodeEnum
	TZ CountryCodeEnum
	TH CountryCodeEnum
	TG CountryCodeEnum
	TO CountryCodeEnum
	TT CountryCodeEnum
	TN CountryCodeEnum
	TR CountryCodeEnum
	TM CountryCodeEnum
	TC CountryCodeEnum
	TV CountryCodeEnum
	UG CountryCodeEnum
	UA CountryCodeEnum
	AE CountryCodeEnum
	GB CountryCodeEnum
	US CountryCodeEnum
	UY CountryCodeEnum
	VU CountryCodeEnum
	VE CountryCodeEnum
	VN CountryCodeEnum
	VG CountryCodeEnum
	WF CountryCodeEnum
	YE CountryCodeEnum
	ZM CountryCodeEnum

	// Used to iterate in range loops
	Values [194]CountryCodeEnum
}{
	AL: CountryCodeEnum{value_1x0zlez3dcfaz: 1},
	DZ: CountryCodeEnum{value_1x0zlez3dcfaz: 2},
	AD: CountryCodeEnum{value_1x0zlez3dcfaz: 3},
	AO: CountryCodeEnum{value_1x0zlez3dcfaz: 4},
	AI: CountryCodeEnum{value_1x0zlez3dcfaz: 5},
	AG: CountryCodeEnum{value_1x0zlez3dcfaz: 6},
	AR: CountryCodeEnum{value_1x0zlez3dcfaz: 7},
	AM: CountryCodeEnum{value_1x0zlez3dcfaz: 8},
	AW: CountryCodeEnum{value_1x0zlez3dcfaz: 9},
	AU: CountryCodeEnum{value_1x0zlez3dcfaz: 10},
	AT: CountryCodeEnum{value_1x0zlez3dcfaz: 11},
	AZ: CountryCodeEnum{value_1x0zlez3dcfaz: 12},
	BS: CountryCodeEnum{value_1x0zlez3dcfaz: 13},
	BH: CountryCodeEnum{value_1x0zlez3dcfaz: 14},
	BB: CountryCodeEnum{value_1x0zlez3dcfaz: 15},
	BE: CountryCodeEnum{value_1x0zlez3dcfaz: 16},
	BZ: CountryCodeEnum{value_1x0zlez3dcfaz: 17},
	BJ: CountryCodeEnum{value_1x0zlez3dcfaz: 18},
	BM: CountryCodeEnum{value_1x0zlez3dcfaz: 19},
	BT: CountryCodeEnum{value_1x0zlez3dcfaz: 20},
	BO: CountryCodeEnum{value_1x0zlez3dcfaz: 21},
	BA: CountryCodeEnum{value_1x0zlez3dcfaz: 22},
	BW: CountryCodeEnum{value_1x0zlez3dcfaz: 23},
	BR: CountryCodeEnum{value_1x0zlez3dcfaz: 24},
	BN: CountryCodeEnum{value_1x0zlez3dcfaz: 25},
	BG: CountryCodeEnum{value_1x0zlez3dcfaz: 26},
	BF: CountryCodeEnum{value_1x0zlez3dcfaz: 27},
	BI: CountryCodeEnum{value_1x0zlez3dcfaz: 28},
	KH: CountryCodeEnum{value_1x0zlez3dcfaz: 29},
	CA: CountryCodeEnum{value_1x0zlez3dcfaz: 30},
	CV: CountryCodeEnum{value_1x0zlez3dcfaz: 31},
	KY: CountryCodeEnum{value_1x0zlez3dcfaz: 32},
	TD: CountryCodeEnum{value_1x0zlez3dcfaz: 33},
	CL: CountryCodeEnum{value_1x0zlez3dcfaz: 34},
	CN: CountryCodeEnum{value_1x0zlez3dcfaz: 35},
	C2: CountryCodeEnum{value_1x0zlez3dcfaz: 36},
	CO: CountryCodeEnum{value_1x0zlez3dcfaz: 37},
	KM: CountryCodeEnum{value_1x0zlez3dcfaz: 38},
	CD: CountryCodeEnum{value_1x0zlez3dcfaz: 39},
	CG: CountryCodeEnum{value_1x0zlez3dcfaz: 40},
	CK: CountryCodeEnum{value_1x0zlez3dcfaz: 41},
	CR: CountryCodeEnum{value_1x0zlez3dcfaz: 42},
	HR: CountryCodeEnum{value_1x0zlez3dcfaz: 43},
	CY: CountryCodeEnum{value_1x0zlez3dcfaz: 44},
	CZ: CountryCodeEnum{value_1x0zlez3dcfaz: 45},
	DK: CountryCodeEnum{value_1x0zlez3dcfaz: 46},
	DJ: CountryCodeEnum{value_1x0zlez3dcfaz: 47},
	DM: CountryCodeEnum{value_1x0zlez3dcfaz: 48},
	DO: CountryCodeEnum{value_1x0zlez3dcfaz: 49},
	EC: CountryCodeEnum{value_1x0zlez3dcfaz: 50},
	EG: CountryCodeEnum{value_1x0zlez3dcfaz: 51},
	SV: CountryCodeEnum{value_1x0zlez3dcfaz: 52},
	ER: CountryCodeEnum{value_1x0zlez3dcfaz: 53},
	EE: CountryCodeEnum{value_1x0zlez3dcfaz: 54},
	ET: CountryCodeEnum{value_1x0zlez3dcfaz: 55},
	FK: CountryCodeEnum{value_1x0zlez3dcfaz: 56},
	FJ: CountryCodeEnum{value_1x0zlez3dcfaz: 57},
	FI: CountryCodeEnum{value_1x0zlez3dcfaz: 58},
	FR: CountryCodeEnum{value_1x0zlez3dcfaz: 59},
	GF: CountryCodeEnum{value_1x0zlez3dcfaz: 60},
	PF: CountryCodeEnum{value_1x0zlez3dcfaz: 61},
	GA: CountryCodeEnum{value_1x0zlez3dcfaz: 62},
	GM: CountryCodeEnum{value_1x0zlez3dcfaz: 63},
	GE: CountryCodeEnum{value_1x0zlez3dcfaz: 64},
	DE: CountryCodeEnum{value_1x0zlez3dcfaz: 65},
	GI: CountryCodeEnum{value_1x0zlez3dcfaz: 66},
	GR: CountryCodeEnum{value_1x0zlez3dcfaz: 67},
	GL: CountryCodeEnum{value_1x0zlez3dcfaz: 68},
	GD: CountryCodeEnum{value_1x0zlez3dcfaz: 69},
	GP: CountryCodeEnum{value_1x0zlez3dcfaz: 70},
	GU: CountryCodeEnum{value_1x0zlez3dcfaz: 71},
	GT: CountryCodeEnum{value_1x0zlez3dcfaz: 72},
	GN: CountryCodeEnum{value_1x0zlez3dcfaz: 73},
	GW: CountryCodeEnum{value_1x0zlez3dcfaz: 74},
	GY: CountryCodeEnum{value_1x0zlez3dcfaz: 75},
	VA: CountryCodeEnum{value_1x0zlez3dcfaz: 76},
	HN: CountryCodeEnum{value_1x0zlez3dcfaz: 77},
	HK: CountryCodeEnum{value_1x0zlez3dcfaz: 78},
	HU: CountryCodeEnum{value_1x0zlez3dcfaz: 79},
	IS: CountryCodeEnum{value_1x0zlez3dcfaz: 80},
	IN: CountryCodeEnum{value_1x0zlez3dcfaz: 81},
	ID: CountryCodeEnum{value_1x0zlez3dcfaz: 82},
	IE: CountryCodeEnum{value_1x0zlez3dcfaz: 83},
	IL: CountryCodeEnum{value_1x0zlez3dcfaz: 84},
	IT: CountryCodeEnum{value_1x0zlez3dcfaz: 85},
	JM: CountryCodeEnum{value_1x0zlez3dcfaz: 86},
	JP: CountryCodeEnum{value_1x0zlez3dcfaz: 87},
	JO: CountryCodeEnum{value_1x0zlez3dcfaz: 88},
	KZ: CountryCodeEnum{value_1x0zlez3dcfaz: 89},
	KE: CountryCodeEnum{value_1x0zlez3dcfaz: 90},
	KI: CountryCodeEnum{value_1x0zlez3dcfaz: 91},
	KR: CountryCodeEnum{value_1x0zlez3dcfaz: 92},
	KW: CountryCodeEnum{value_1x0zlez3dcfaz: 93},
	KG: CountryCodeEnum{value_1x0zlez3dcfaz: 94},
	LA: CountryCodeEnum{value_1x0zlez3dcfaz: 95},
	LV: CountryCodeEnum{value_1x0zlez3dcfaz: 96},
	LS: CountryCodeEnum{value_1x0zlez3dcfaz: 97},
	LI: CountryCodeEnum{value_1x0zlez3dcfaz: 98},
	LT: CountryCodeEnum{value_1x0zlez3dcfaz: 99},
	LU: CountryCodeEnum{value_1x0zlez3dcfaz: 100},
	MG: CountryCodeEnum{value_1x0zlez3dcfaz: 101},
	MW: CountryCodeEnum{value_1x0zlez3dcfaz: 102},
	MY: CountryCodeEnum{value_1x0zlez3dcfaz: 103},
	MV: CountryCodeEnum{value_1x0zlez3dcfaz: 104},
	ML: CountryCodeEnum{value_1x0zlez3dcfaz: 105},
	MT: CountryCodeEnum{value_1x0zlez3dcfaz: 106},
	MH: CountryCodeEnum{value_1x0zlez3dcfaz: 107},
	MQ: CountryCodeEnum{value_1x0zlez3dcfaz: 108},
	MR: CountryCodeEnum{value_1x0zlez3dcfaz: 109},
	MU: CountryCodeEnum{value_1x0zlez3dcfaz: 110},
	YT: CountryCodeEnum{value_1x0zlez3dcfaz: 111},
	MX: CountryCodeEnum{value_1x0zlez3dcfaz: 112},
	FM: CountryCodeEnum{value_1x0zlez3dcfaz: 113},
	MN: CountryCodeEnum{value_1x0zlez3dcfaz: 114},
	MS: CountryCodeEnum{value_1x0zlez3dcfaz: 115},
	MA: CountryCodeEnum{value_1x0zlez3dcfaz: 116},
	MZ: CountryCodeEnum{value_1x0zlez3dcfaz: 117},
	NA: CountryCodeEnum{value_1x0zlez3dcfaz: 118},
	NR: CountryCodeEnum{value_1x0zlez3dcfaz: 119},
	NP: CountryCodeEnum{value_1x0zlez3dcfaz: 120},
	NL: CountryCodeEnum{value_1x0zlez3dcfaz: 121},
	AN: CountryCodeEnum{value_1x0zlez3dcfaz: 122},
	NC: CountryCodeEnum{value_1x0zlez3dcfaz: 123},
	NZ: CountryCodeEnum{value_1x0zlez3dcfaz: 124},
	NI: CountryCodeEnum{value_1x0zlez3dcfaz: 125},
	NE: CountryCodeEnum{value_1x0zlez3dcfaz: 126},
	NU: CountryCodeEnum{value_1x0zlez3dcfaz: 127},
	NF: CountryCodeEnum{value_1x0zlez3dcfaz: 128},
	NO: CountryCodeEnum{value_1x0zlez3dcfaz: 129},
	OM: CountryCodeEnum{value_1x0zlez3dcfaz: 130},
	PW: CountryCodeEnum{value_1x0zlez3dcfaz: 131},
	PA: CountryCodeEnum{value_1x0zlez3dcfaz: 132},
	PG: CountryCodeEnum{value_1x0zlez3dcfaz: 133},
	PE: CountryCodeEnum{value_1x0zlez3dcfaz: 134},
	PH: CountryCodeEnum{value_1x0zlez3dcfaz: 135},
	PN: CountryCodeEnum{value_1x0zlez3dcfaz: 136},
	PL: CountryCodeEnum{value_1x0zlez3dcfaz: 137},
	PT: CountryCodeEnum{value_1x0zlez3dcfaz: 138},
	QA: CountryCodeEnum{value_1x0zlez3dcfaz: 139},
	RE: CountryCodeEnum{value_1x0zlez3dcfaz: 140},
	RO: CountryCodeEnum{value_1x0zlez3dcfaz: 141},
	RU: CountryCodeEnum{value_1x0zlez3dcfaz: 142},
	RW: CountryCodeEnum{value_1x0zlez3dcfaz: 143},
	SH: CountryCodeEnum{value_1x0zlez3dcfaz: 144},
	KN: CountryCodeEnum{value_1x0zlez3dcfaz: 145},
	LC: CountryCodeEnum{value_1x0zlez3dcfaz: 146},
	PM: CountryCodeEnum{value_1x0zlez3dcfaz: 147},
	VC: CountryCodeEnum{value_1x0zlez3dcfaz: 148},
	WS: CountryCodeEnum{value_1x0zlez3dcfaz: 149},
	SM: CountryCodeEnum{value_1x0zlez3dcfaz: 150},
	ST: CountryCodeEnum{value_1x0zlez3dcfaz: 151},
	SA: CountryCodeEnum{value_1x0zlez3dcfaz: 152},
	SN: CountryCodeEnum{value_1x0zlez3dcfaz: 153},
	RS: CountryCodeEnum{value_1x0zlez3dcfaz: 154},
	SC: CountryCodeEnum{value_1x0zlez3dcfaz: 155},
	SL: CountryCodeEnum{value_1x0zlez3dcfaz: 156},
	SG: CountryCodeEnum{value_1x0zlez3dcfaz: 157},
	SK: CountryCodeEnum{value_1x0zlez3dcfaz: 158},
	SI: CountryCodeEnum{value_1x0zlez3dcfaz: 159},
	SB: CountryCodeEnum{value_1x0zlez3dcfaz: 160},
	SO: CountryCodeEnum{value_1x0zlez3dcfaz: 161},
	ZA: CountryCodeEnum{value_1x0zlez3dcfaz: 162},
	ES: CountryCodeEnum{value_1x0zlez3dcfaz: 163},
	LK: CountryCodeEnum{value_1x0zlez3dcfaz: 164},
	SR: CountryCodeEnum{value_1x0zlez3dcfaz: 165},
	SJ: CountryCodeEnum{value_1x0zlez3dcfaz: 166},
	SZ: CountryCodeEnum{value_1x0zlez3dcfaz: 167},
	SE: CountryCodeEnum{value_1x0zlez3dcfaz: 168},
	CH: CountryCodeEnum{value_1x0zlez3dcfaz: 169},
	TW: CountryCodeEnum{value_1x0zlez3dcfaz: 170},
	TJ: CountryCodeEnum{value_1x0zlez3dcfaz: 171},
	TZ: CountryCodeEnum{value_1x0zlez3dcfaz: 172},
	TH: CountryCodeEnum{value_1x0zlez3dcfaz: 173},
	TG: CountryCodeEnum{value_1x0zlez3dcfaz: 174},
	TO: CountryCodeEnum{value_1x0zlez3dcfaz: 175},
	TT: CountryCodeEnum{value_1x0zlez3dcfaz: 176},
	TN: CountryCodeEnum{value_1x0zlez3dcfaz: 177},
	TR: CountryCodeEnum{value_1x0zlez3dcfaz: 178},
	TM: CountryCodeEnum{value_1x0zlez3dcfaz: 179},
	TC: CountryCodeEnum{value_1x0zlez3dcfaz: 180},
	TV: CountryCodeEnum{value_1x0zlez3dcfaz: 181},
	UG: CountryCodeEnum{value_1x0zlez3dcfaz: 182},
	UA: CountryCodeEnum{value_1x0zlez3dcfaz: 183},
	AE: CountryCodeEnum{value_1x0zlez3dcfaz: 184},
	GB: CountryCodeEnum{value_1x0zlez3dcfaz: 185},
	US: CountryCodeEnum{value_1x0zlez3dcfaz: 186},
	UY: CountryCodeEnum{value_1x0zlez3dcfaz: 187},
	VU: CountryCodeEnum{value_1x0zlez3dcfaz: 188},
	VE: CountryCodeEnum{value_1x0zlez3dcfaz: 189},
	VN: CountryCodeEnum{value_1x0zlez3dcfaz: 190},
	VG: CountryCodeEnum{value_1x0zlez3dcfaz: 191},
	WF: CountryCodeEnum{value_1x0zlez3dcfaz: 192},
	YE: CountryCodeEnum{value_1x0zlez3dcfaz: 193},
	ZM: CountryCodeEnum{value_1x0zlez3dcfaz: 194},
}

func init() {
	CountryCode.Values = [194]CountryCodeEnum{
		CountryCode.AL, CountryCode.DZ, CountryCode.AD, CountryCode.AO, CountryCode.AI, CountryCode.AG, CountryCode.AR, CountryCode.AM, CountryCode.AW, CountryCode.AU, CountryCode.AT, CountryCode.AZ, CountryCode.BS, CountryCode.BH, CountryCode.BB, CountryCode.BE, CountryCode.BZ, CountryCode.BJ, CountryCode.BM, CountryCode.BT, CountryCode.BO, CountryCode.BA, CountryCode.BW, CountryCode.BR, CountryCode.BN, CountryCode.BG, CountryCode.BF, CountryCode.BI, CountryCode.KH, CountryCode.CA, CountryCode.CV, CountryCode.KY, CountryCode.TD, CountryCode.CL, CountryCode.CN, CountryCode.C2, CountryCode.CO, CountryCode.KM, CountryCode.CD, CountryCode.CG, CountryCode.CK, CountryCode.CR, CountryCode.HR, CountryCode.CY, CountryCode.CZ, CountryCode.DK, CountryCode.DJ, CountryCode.DM, CountryCode.DO, CountryCode.EC, CountryCode.EG, CountryCode.SV, CountryCode.ER, CountryCode.EE, CountryCode.ET, CountryCode.FK, CountryCode.FJ, CountryCode.FI, CountryCode.FR, CountryCode.GF, CountryCode.PF, CountryCode.GA, CountryCode.GM, CountryCode.GE, CountryCode.DE, CountryCode.GI, CountryCode.GR, CountryCode.GL, CountryCode.GD, CountryCode.GP, CountryCode.GU, CountryCode.GT, CountryCode.GN, CountryCode.GW, CountryCode.GY, CountryCode.VA, CountryCode.HN, CountryCode.HK, CountryCode.HU, CountryCode.IS, CountryCode.IN, CountryCode.ID, CountryCode.IE, CountryCode.IL, CountryCode.IT, CountryCode.JM, CountryCode.JP, CountryCode.JO, CountryCode.KZ, CountryCode.KE, CountryCode.KI, CountryCode.KR, CountryCode.KW, CountryCode.KG, CountryCode.LA, CountryCode.LV, CountryCode.LS, CountryCode.LI, CountryCode.LT, CountryCode.LU, CountryCode.MG, CountryCode.MW, CountryCode.MY, CountryCode.MV, CountryCode.ML, CountryCode.MT, CountryCode.MH, CountryCode.MQ, CountryCode.MR, CountryCode.MU, CountryCode.YT, CountryCode.MX, CountryCode.FM, CountryCode.MN, CountryCode.MS, CountryCode.MA, CountryCode.MZ, CountryCode.NA, CountryCode.NR, CountryCode.NP, CountryCode.NL, CountryCode.AN, CountryCode.NC, CountryCode.NZ, CountryCode.NI, CountryCode.NE, CountryCode.NU, CountryCode.NF, CountryCode.NO, CountryCode.OM, CountryCode.PW, CountryCode.PA, CountryCode.PG, CountryCode.PE, CountryCode.PH, CountryCode.PN, CountryCode.PL, CountryCode.PT, CountryCode.QA, CountryCode.RE, CountryCode.RO, CountryCode.RU, CountryCode.RW, CountryCode.SH, CountryCode.KN, CountryCode.LC, CountryCode.PM, CountryCode.VC, CountryCode.WS, CountryCode.SM, CountryCode.ST, CountryCode.SA, CountryCode.SN, CountryCode.RS, CountryCode.SC, CountryCode.SL, CountryCode.SG, CountryCode.SK, CountryCode.SI, CountryCode.SB, CountryCode.SO, CountryCode.ZA, CountryCode.ES, CountryCode.LK, CountryCode.SR, CountryCode.SJ, CountryCode.SZ, CountryCode.SE, CountryCode.CH, CountryCode.TW, CountryCode.TJ, CountryCode.TZ, CountryCode.TH, CountryCode.TG, CountryCode.TO, CountryCode.TT, CountryCode.TN, CountryCode.TR, CountryCode.TM, CountryCode.TC, CountryCode.TV, CountryCode.UG, CountryCode.UA, CountryCode.AE, CountryCode.GB, CountryCode.US, CountryCode.UY, CountryCode.VU, CountryCode.VE, CountryCode.VN, CountryCode.VG, CountryCode.WF, CountryCode.YE, CountryCode.ZM,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Ce CountryCodeEnum) Value() uint8 {
	return Ce.value_1x0zlez3dcfaz
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Ce CountryCodeEnum) IntValue() int {
	return int(Ce.value_1x0zlez3dcfaz)
}

// Name returns the name of the variant as a string.
func (Ce CountryCodeEnum) Name() string {
	switch Ce.value_1x0zlez3dcfaz {
	case 1:
		return "AL"
	case 2:
		return "DZ"
	case 3:
		return "AD"
	case 4:
		return "AO"
	case 5:
		return "AI"
	case 6:
		return "AG"
	case 7:
		return "AR"
	case 8:
		return "AM"
	case 9:
		return "AW"
	case 10:
		return "AU"
	case 11:
		return "AT"
	case 12:
		return "AZ"
	case 13:
		return "BS"
	case 14:
		return "BH"
	case 15:
		return "BB"
	case 16:
		return "BE"
	case 17:
		return "BZ"
	case 18:
		return "BJ"
	case 19:
		return "BM"
	case 20:
		return "BT"
	case 21:
		return "BO"
	case 22:
		return "BA"
	case 23:
		return "BW"
	case 24:
		return "BR"
	case 25:
		return "BN"
	case 26:
		return "BG"
	case 27:
		return "BF"
	case 28:
		return "BI"
	case 29:
		return "KH"
	case 30:
		return "CA"
	case 31:
		return "CV"
	case 32:
		return "KY"
	case 33:
		return "TD"
	case 34:
		return "CL"
	case 35:
		return "CN"
	case 36:
		return "C2"
	case 37:
		return "CO"
	case 38:
		return "KM"
	case 39:
		return "CD"
	case 40:
		return "CG"
	case 41:
		return "CK"
	case 42:
		return "CR"
	case 43:
		return "HR"
	case 44:
		return "CY"
	case 45:
		return "CZ"
	case 46:
		return "DK"
	case 47:
		return "DJ"
	case 48:
		return "DM"
	case 49:
		return "DO"
	case 50:
		return "EC"
	case 51:
		return "EG"
	case 52:
		return "SV"
	case 53:
		return "ER"
	case 54:
		return "EE"
	case 55:
		return "ET"
	case 56:
		return "FK"
	case 57:
		return "FJ"
	case 58:
		return "FI"
	case 59:
		return "FR"
	case 60:
		return "GF"
	case 61:
		return "PF"
	case 62:
		return "GA"
	case 63:
		return "GM"
	case 64:
		return "GE"
	case 65:
		return "DE"
	case 66:
		return "GI"
	case 67:
		return "GR"
	case 68:
		return "GL"
	case 69:
		return "GD"
	case 70:
		return "GP"
	case 71:
		return "GU"
	case 72:
		return "GT"
	case 73:
		return "GN"
	case 74:
		return "GW"
	case 75:
		return "GY"
	case 76:
		return "VA"
	case 77:
		return "HN"
	case 78:
		return "HK"
	case 79:
		return "HU"
	case 80:
		return "IS"
	case 81:
		return "IN"
	case 82:
		return "ID"
	case 83:
		return "IE"
	case 84:
		return "IL"
	case 85:
		return "IT"
	case 86:
		return "JM"
	case 87:
		return "JP"
	case 88:
		return "JO"
	case 89:
		return "KZ"
	case 90:
		return "KE"
	case 91:
		return "KI"
	case 92:
		return "KR"
	case 93:
		return "KW"
	case 94:
		return "KG"
	case 95:
		return "LA"
	case 96:
		return "LV"
	case 97:
		return "LS"
	case 98:
		return "LI"
	case 99:
		return "LT"
	case 100:
		return "LU"
	case 101:
		return "MG"
	case 102:
		return "MW"
	case 103:
		return "MY"
	case 104:
		return "MV"
	case 105:
		return "ML"
	case 106:
		return "MT"
	case 107:
		return "MH"
	case 108:
		return "MQ"
	case 109:
		return "MR"
	case 110:
		return "MU"
	case 111:
		return "YT"
	case 112:
		return "MX"
	case 113:
		return "FM"
	case 114:
		return "MN"
	case 115:
		return "MS"
	case 116:
		return "MA"
	case 117:
		return "MZ"
	case 118:
		return "NA"
	case 119:
		return "NR"
	case 120:
		return "NP"
	case 121:
		return "NL"
	case 122:
		return "AN"
	case 123:
		return "NC"
	case 124:
		return "NZ"
	case 125:
		return "NI"
	case 126:
		return "NE"
	case 127:
		return "NU"
	case 128:
		return "NF"
	case 129:
		return "NO"
	case 130:
		return "OM"
	case 131:
		return "PW"
	case 132:
		return "PA"
	case 133:
		return "PG"
	case 134:
		return "PE"
	case 135:
		return "PH"
	case 136:
		return "PN"
	case 137:
		return "PL"
	case 138:
		return "PT"
	case 139:
		return "QA"
	case 140:
		return "RE"
	case 141:
		return "RO"
	case 142:
		return "RU"
	case 143:
		return "RW"
	case 144:
		return "SH"
	case 145:
		return "KN"
	case 146:
		return "LC"
	case 147:
		return "PM"
	case 148:
		return "VC"
	case 149:
		return "WS"
	case 150:
		return "SM"
	case 151:
		return "ST"
	case 152:
		return "SA"
	case 153:
		return "SN"
	case 154:
		return "RS"
	case 155:
		return "SC"
	case 156:
		return "SL"
	case 157:
		return "SG"
	case 158:
		return "SK"
	case 159:
		return "SI"
	case 160:
		return "SB"
	case 161:
		return "SO"
	case 162:
		return "ZA"
	case 163:
		return "ES"
	case 164:
		return "LK"
	case 165:
		return "SR"
	case 166:
		return "SJ"
	case 167:
		return "SZ"
	case 168:
		return "SE"
	case 169:
		return "CH"
	case 170:
		return "TW"
	case 171:
		return "TJ"
	case 172:
		return "TZ"
	case 173:
		return "TH"
	case 174:
		return "TG"
	case 175:
		return "TO"
	case 176:
		return "TT"
	case 177:
		return "TN"
	case 178:
		return "TR"
	case 179:
		return "TM"
	case 180:
		return "TC"
	case 181:
		return "TV"
	case 182:
		return "UG"
	case 183:
		return "UA"
	case 184:
		return "AE"
	case 185:
		return "GB"
	case 186:
		return "US"
	case 187:
		return "UY"
	case 188:
		return "VU"
	case 189:
		return "VE"
	case 190:
		return "VN"
	case 191:
		return "VG"
	case 192:
		return "WF"
	case 193:
		return "YE"
	case 194:
		return "ZM"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Ce CountryCodeEnum) Type() string {
	return "CountryCodeEnum"
}

// Namespace returns the variant's namespace name as a string
func (Ce CountryCodeEnum) Namespace() string {
	return "CountryCode"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Ce CountryCodeEnum) String() string {
	switch Ce.value_1x0zlez3dcfaz {
	case 1:
		return "AL"
	case 2:
		return "DZ"
	case 3:
		return "AD"
	case 4:
		return "AO"
	case 5:
		return "AI"
	case 6:
		return "AG"
	case 7:
		return "AR"
	case 8:
		return "AM"
	case 9:
		return "AW"
	case 10:
		return "AU"
	case 11:
		return "AT"
	case 12:
		return "AZ"
	case 13:
		return "BS"
	case 14:
		return "BH"
	case 15:
		return "BB"
	case 16:
		return "BE"
	case 17:
		return "BZ"
	case 18:
		return "BJ"
	case 19:
		return "BM"
	case 20:
		return "BT"
	case 21:
		return "BO"
	case 22:
		return "BA"
	case 23:
		return "BW"
	case 24:
		return "BR"
	case 25:
		return "BN"
	case 26:
		return "BG"
	case 27:
		return "BF"
	case 28:
		return "BI"
	case 29:
		return "KH"
	case 30:
		return "CA"
	case 31:
		return "CV"
	case 32:
		return "KY"
	case 33:
		return "TD"
	case 34:
		return "CL"
	case 35:
		return "CN"
	case 36:
		return "C2"
	case 37:
		return "CO"
	case 38:
		return "KM"
	case 39:
		return "CD"
	case 40:
		return "CG"
	case 41:
		return "CK"
	case 42:
		return "CR"
	case 43:
		return "HR"
	case 44:
		return "CY"
	case 45:
		return "CZ"
	case 46:
		return "DK"
	case 47:
		return "DJ"
	case 48:
		return "DM"
	case 49:
		return "DO"
	case 50:
		return "EC"
	case 51:
		return "EG"
	case 52:
		return "SV"
	case 53:
		return "ER"
	case 54:
		return "EE"
	case 55:
		return "ET"
	case 56:
		return "FK"
	case 57:
		return "FJ"
	case 58:
		return "FI"
	case 59:
		return "FR"
	case 60:
		return "GF"
	case 61:
		return "PF"
	case 62:
		return "GA"
	case 63:
		return "GM"
	case 64:
		return "GE"
	case 65:
		return "DE"
	case 66:
		return "GI"
	case 67:
		return "GR"
	case 68:
		return "GL"
	case 69:
		return "GD"
	case 70:
		return "GP"
	case 71:
		return "GU"
	case 72:
		return "GT"
	case 73:
		return "GN"
	case 74:
		return "GW"
	case 75:
		return "GY"
	case 76:
		return "VA"
	case 77:
		return "HN"
	case 78:
		return "HK"
	case 79:
		return "HU"
	case 80:
		return "IS"
	case 81:
		return "IN"
	case 82:
		return "ID"
	case 83:
		return "IE"
	case 84:
		return "IL"
	case 85:
		return "IT"
	case 86:
		return "JM"
	case 87:
		return "JP"
	case 88:
		return "JO"
	case 89:
		return "KZ"
	case 90:
		return "KE"
	case 91:
		return "KI"
	case 92:
		return "KR"
	case 93:
		return "KW"
	case 94:
		return "KG"
	case 95:
		return "LA"
	case 96:
		return "LV"
	case 97:
		return "LS"
	case 98:
		return "LI"
	case 99:
		return "LT"
	case 100:
		return "LU"
	case 101:
		return "MG"
	case 102:
		return "MW"
	case 103:
		return "MY"
	case 104:
		return "MV"
	case 105:
		return "ML"
	case 106:
		return "MT"
	case 107:
		return "MH"
	case 108:
		return "MQ"
	case 109:
		return "MR"
	case 110:
		return "MU"
	case 111:
		return "YT"
	case 112:
		return "MX"
	case 113:
		return "FM"
	case 114:
		return "MN"
	case 115:
		return "MS"
	case 116:
		return "MA"
	case 117:
		return "MZ"
	case 118:
		return "NA"
	case 119:
		return "NR"
	case 120:
		return "NP"
	case 121:
		return "NL"
	case 122:
		return "AN"
	case 123:
		return "NC"
	case 124:
		return "NZ"
	case 125:
		return "NI"
	case 126:
		return "NE"
	case 127:
		return "NU"
	case 128:
		return "NF"
	case 129:
		return "NO"
	case 130:
		return "OM"
	case 131:
		return "PW"
	case 132:
		return "PA"
	case 133:
		return "PG"
	case 134:
		return "PE"
	case 135:
		return "PH"
	case 136:
		return "PN"
	case 137:
		return "PL"
	case 138:
		return "PT"
	case 139:
		return "QA"
	case 140:
		return "RE"
	case 141:
		return "RO"
	case 142:
		return "RU"
	case 143:
		return "RW"
	case 144:
		return "SH"
	case 145:
		return "KN"
	case 146:
		return "LC"
	case 147:
		return "PM"
	case 148:
		return "VC"
	case 149:
		return "WS"
	case 150:
		return "SM"
	case 151:
		return "ST"
	case 152:
		return "SA"
	case 153:
		return "SN"
	case 154:
		return "RS"
	case 155:
		return "SC"
	case 156:
		return "SL"
	case 157:
		return "SG"
	case 158:
		return "SK"
	case 159:
		return "SI"
	case 160:
		return "SB"
	case 161:
		return "SO"
	case 162:
		return "ZA"
	case 163:
		return "ES"
	case 164:
		return "LK"
	case 165:
		return "SR"
	case 166:
		return "SJ"
	case 167:
		return "SZ"
	case 168:
		return "SE"
	case 169:
		return "CH"
	case 170:
		return "TW"
	case 171:
		return "TJ"
	case 172:
		return "TZ"
	case 173:
		return "TH"
	case 174:
		return "TG"
	case 175:
		return "TO"
	case 176:
		return "TT"
	case 177:
		return "TN"
	case 178:
		return "TR"
	case 179:
		return "TM"
	case 180:
		return "TC"
	case 181:
		return "TV"
	case 182:
		return "UG"
	case 183:
		return "UA"
	case 184:
		return "AE"
	case 185:
		return "GB"
	case 186:
		return "US"
	case 187:
		return "UY"
	case 188:
		return "VU"
	case 189:
		return "VE"
	case 190:
		return "VN"
	case 191:
		return "VG"
	case 192:
		return "WF"
	case 193:
		return "YE"
	case 194:
		return "ZM"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Ce CountryCodeEnum) Description() string {
	switch Ce.value_1x0zlez3dcfaz {
	case 1:
		return "ALBANIA"
	case 2:
		return "ALGERIA"
	case 3:
		return "ANDORRA"
	case 4:
		return "ANGOLA"
	case 5:
		return "ANGUILLA"
	case 6:
		return "ANTIGUA AND BARBUDA"
	case 7:
		return "ARGENTINA"
	case 8:
		return "ARMENIA"
	case 9:
		return "ARUBA"
	case 10:
		return "AUSTRALIA"
	case 11:
		return "AUSTRIA"
	case 12:
		return "AZERBAIJAN"
	case 13:
		return "BAHAMAS"
	case 14:
		return "BAHRAIN"
	case 15:
		return "BARBADOS"
	case 16:
		return "BELGIUM"
	case 17:
		return "BELIZE"
	case 18:
		return "BENIN"
	case 19:
		return "BERMUDA"
	case 20:
		return "BHUTAN"
	case 21:
		return "BOLIVIA"
	case 22:
		return "BOSNIA-HERZEGOVINA"
	case 23:
		return "BOTSWANA"
	case 24:
		return "BRAZIL"
	case 25:
		return "BRUNEI DARUSSALAM"
	case 26:
		return "BULGARIA"
	case 27:
		return "BURKINA FASO"
	case 28:
		return "BURUNDI"
	case 29:
		return "CAMBODIA"
	case 30:
		return "CANADA"
	case 31:
		return "CAPE VERDE"
	case 32:
		return "CAYMAN ISLANDS"
	case 33:
		return "CHAD"
	case 34:
		return "CHILE"
	case 35:
		return "CHINA (For domestic Chinese bank transactions only)"
	case 36:
		return "CHINA (For CUP, bank card and cross-border transactions)"
	case 37:
		return "COLOMBIA"
	case 38:
		return "COMOROS"
	case 39:
		return "DEMOCRATIC REPUBLIC OF CONGO"
	case 40:
		return "CONGO"
	case 41:
		return "COOK ISLANDS"
	case 42:
		return "COSTA RICA"
	case 43:
		return "CROATIA"
	case 44:
		return "CYPRUS"
	case 45:
		return "CZECH REPUBLIC"
	case 46:
		return "DENMARK"
	case 47:
		return "DJIBOUTI"
	case 48:
		return "DOMINICA"
	case 49:
		return "DOMINICAN REPUBLIC"
	case 50:
		return "ECUADOR"
	case 51:
		return "EGYPT"
	case 52:
		return "EL SALVADOR"
	case 53:
		return "ERITERIA"
	case 54:
		return "ESTONIA"
	case 55:
		return "ETHIOPIA"
	case 56:
		return "FALKLAND ISLANDS (MALVINAS)"
	case 57:
		return "FIJI"
	case 58:
		return "FINLAND"
	case 59:
		return "FRANCE"
	case 60:
		return "FRENCH GUIANA"
	case 61:
		return "FRENCH POLYNESIA"
	case 62:
		return "GABON"
	case 63:
		return "GAMBIA"
	case 64:
		return "GEORGIA"
	case 65:
		return "GERMANY"
	case 66:
		return "GIBRALTAR"
	case 67:
		return "GREECE"
	case 68:
		return "GREENLAND"
	case 69:
		return "GRENADA"
	case 70:
		return "GUADELOUPE"
	case 71:
		return "GUAM"
	case 72:
		return "GUATEMALA"
	case 73:
		return "GUINEA"
	case 74:
		return "GUINEA BISSAU"
	case 75:
		return "GUYANA"
	case 76:
		return "HOLY SEE (VATICAN CITY STATE)"
	case 77:
		return "HONDURAS"
	case 78:
		return "HONG KONG"
	case 79:
		return "HUNGARY"
	case 80:
		return "ICELAND"
	case 81:
		return "INDIA"
	case 82:
		return "INDONESIA"
	case 83:
		return "IRELAND"
	case 84:
		return "ISRAEL"
	case 85:
		return "ITALY"
	case 86:
		return "JAMAICA"
	case 87:
		return "JAPAN"
	case 88:
		return "JORDAN"
	case 89:
		return "KAZAKHSTAN"
	case 90:
		return "KENYA"
	case 91:
		return "KIRIBATI"
	case 92:
		return "KOREA, REPUBLIC OF (or SOUTH KOREA)"
	case 93:
		return "KUWAIT"
	case 94:
		return "KYRGYZSTAN"
	case 95:
		return "LAOS"
	case 96:
		return "LATVIA"
	case 97:
		return "LESOTHO"
	case 98:
		return "LIECHTENSTEIN"
	case 99:
		return "LITHUANIA"
	case 100:
		return "LUXEMBOURG"
	case 101:
		return "MADAGASCAR"
	case 102:
		return "MALAWI"
	case 103:
		return "MALAYSIA"
	case 104:
		return "MALDIVES"
	case 105:
		return "MALI"
	case 106:
		return "MALTA"
	case 107:
		return "MARSHALL ISLANDS"
	case 108:
		return "MARTINIQUE"
	case 109:
		return "MAURITANIA"
	case 110:
		return "MAURITIUS"
	case 111:
		return "MAYOTTE"
	case 112:
		return "MEXICO"
	case 113:
		return "MICRONESIA, FEDERATED STATES OF"
	case 114:
		return "MONGOLIA"
	case 115:
		return "MONTSERRAT"
	case 116:
		return "MOROCCO"
	case 117:
		return "MOZAMBIQUE"
	case 118:
		return "NAMIBIA"
	case 119:
		return "NAURU"
	case 120:
		return "NEPAL"
	case 121:
		return "NETHERLANDS"
	case 122:
		return "NETHERLANDS ANTILLES"
	case 123:
		return "NEW CALEDONIA"
	case 124:
		return "NEW ZEALAND"
	case 125:
		return "NICARAGUA"
	case 126:
		return "NIGER"
	case 127:
		return "NIUE"
	case 128:
		return "NORFOLK ISLAND"
	case 129:
		return "NORWAY"
	case 130:
		return "OMAN"
	case 131:
		return "PALAU"
	case 132:
		return "PANAMA"
	case 133:
		return "PAPUA NEW GUINEA"
	case 134:
		return "PERU"
	case 135:
		return "PHILIPPINES"
	case 136:
		return "PITCAIRN"
	case 137:
		return "POLAND"
	case 138:
		return "PORTUGAL"
	case 139:
		return "QATAR"
	case 140:
		return "REUNION"
	case 141:
		return "ROMANIA"
	case 142:
		return "RUSSIAN FEDERATION"
	case 143:
		return "RWANDA"
	case 144:
		return "SAINT HELENA"
	case 145:
		return "SAINT KITTS AND NEVIS"
	case 146:
		return "SAINT LUCIA"
	case 147:
		return "SAINT PIERRE AND MIQUELON"
	case 148:
		return "SAINT VINCENT AND THE GRENADINES"
	case 149:
		return "SAMOA"
	case 150:
		return "SAN MARINO"
	case 151:
		return "SAO TOME AND PRINCIPE"
	case 152:
		return "SAUDI ARABIA"
	case 153:
		return "SENEGAL"
	case 154:
		return "SERBIA"
	case 155:
		return "SEYCHELLES"
	case 156:
		return "SIERRA LEONE"
	case 157:
		return "SINGAPORE"
	case 158:
		return "SLOVAKIA"
	case 159:
		return "SLOVENIA"
	case 160:
		return "SOLOMON ISLANDS"
	case 161:
		return "SOMALIA"
	case 162:
		return "SOUTH AFRICA"
	case 163:
		return "SPAIN"
	case 164:
		return "SRI LANKA"
	case 165:
		return "SURINAME"
	case 166:
		return "SVALBARD AND JAN MAYEN"
	case 167:
		return "SWAZILAND"
	case 168:
		return "SWEDEN"
	case 169:
		return "SWITZERLAND"
	case 170:
		return "TAIWAN, PROVINCE OF CHINA"
	case 171:
		return "TAJIKISTAN"
	case 172:
		return "TANZANIA, UNITED REPUBLIC OF"
	case 173:
		return "THAILAND"
	case 174:
		return "TOGO"
	case 175:
		return "TONGA"
	case 176:
		return "TRINIDAD AND TOBAGO"
	case 177:
		return "TUNISIA"
	case 178:
		return "TURKEY"
	case 179:
		return "TURKMENISTAN"
	case 180:
		return "TURKS AND CAICOS ISLANDS"
	case 181:
		return "TUVALU"
	case 182:
		return "UGANDA"
	case 183:
		return "UKRAINE"
	case 184:
		return "UNITED ARAB EMIRATES"
	case 185:
		return "UNITED KINGDOM"
	case 186:
		return "UNITED STATES"
	case 187:
		return "URUGUAY"
	case 188:
		return "VANUATU"
	case 189:
		return "VENEZUELA"
	case 190:
		return "VIETNAM"
	case 191:
		return "VIRGIN ISLANDS, BRITISH"
	case 192:
		return "WALLIS AND FUTUNA"
	case 193:
		return "YEMEN"
	case 194:
		return "ZAMBIA"
	}
	return ""
}

// JSON marshaling methods
func (Ce CountryCodeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Ce.String())), nil
}

func (Ce *CountryCodeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "AL":
		Ce.value_1x0zlez3dcfaz = 1
		return nil
	case "DZ":
		Ce.value_1x0zlez3dcfaz = 2
		return nil
	case "AD":
		Ce.value_1x0zlez3dcfaz = 3
		return nil
	case "AO":
		Ce.value_1x0zlez3dcfaz = 4
		return nil
	case "AI":
		Ce.value_1x0zlez3dcfaz = 5
		return nil
	case "AG":
		Ce.value_1x0zlez3dcfaz = 6
		return nil
	case "AR":
		Ce.value_1x0zlez3dcfaz = 7
		return nil
	case "AM":
		Ce.value_1x0zlez3dcfaz = 8
		return nil
	case "AW":
		Ce.value_1x0zlez3dcfaz = 9
		return nil
	case "AU":
		Ce.value_1x0zlez3dcfaz = 10
		return nil
	case "AT":
		Ce.value_1x0zlez3dcfaz = 11
		return nil
	case "AZ":
		Ce.value_1x0zlez3dcfaz = 12
		return nil
	case "BS":
		Ce.value_1x0zlez3dcfaz = 13
		return nil
	case "BH":
		Ce.value_1x0zlez3dcfaz = 14
		return nil
	case "BB":
		Ce.value_1x0zlez3dcfaz = 15
		return nil
	case "BE":
		Ce.value_1x0zlez3dcfaz = 16
		return nil
	case "BZ":
		Ce.value_1x0zlez3dcfaz = 17
		return nil
	case "BJ":
		Ce.value_1x0zlez3dcfaz = 18
		return nil
	case "BM":
		Ce.value_1x0zlez3dcfaz = 19
		return nil
	case "BT":
		Ce.value_1x0zlez3dcfaz = 20
		return nil
	case "BO":
		Ce.value_1x0zlez3dcfaz = 21
		return nil
	case "BA":
		Ce.value_1x0zlez3dcfaz = 22
		return nil
	case "BW":
		Ce.value_1x0zlez3dcfaz = 23
		return nil
	case "BR":
		Ce.value_1x0zlez3dcfaz = 24
		return nil
	case "BN":
		Ce.value_1x0zlez3dcfaz = 25
		return nil
	case "BG":
		Ce.value_1x0zlez3dcfaz = 26
		return nil
	case "BF":
		Ce.value_1x0zlez3dcfaz = 27
		return nil
	case "BI":
		Ce.value_1x0zlez3dcfaz = 28
		return nil
	case "KH":
		Ce.value_1x0zlez3dcfaz = 29
		return nil
	case "CA":
		Ce.value_1x0zlez3dcfaz = 30
		return nil
	case "CV":
		Ce.value_1x0zlez3dcfaz = 31
		return nil
	case "KY":
		Ce.value_1x0zlez3dcfaz = 32
		return nil
	case "TD":
		Ce.value_1x0zlez3dcfaz = 33
		return nil
	case "CL":
		Ce.value_1x0zlez3dcfaz = 34
		return nil
	case "CN":
		Ce.value_1x0zlez3dcfaz = 35
		return nil
	case "C2":
		Ce.value_1x0zlez3dcfaz = 36
		return nil
	case "CO":
		Ce.value_1x0zlez3dcfaz = 37
		return nil
	case "KM":
		Ce.value_1x0zlez3dcfaz = 38
		return nil
	case "CD":
		Ce.value_1x0zlez3dcfaz = 39
		return nil
	case "CG":
		Ce.value_1x0zlez3dcfaz = 40
		return nil
	case "CK":
		Ce.value_1x0zlez3dcfaz = 41
		return nil
	case "CR":
		Ce.value_1x0zlez3dcfaz = 42
		return nil
	case "HR":
		Ce.value_1x0zlez3dcfaz = 43
		return nil
	case "CY":
		Ce.value_1x0zlez3dcfaz = 44
		return nil
	case "CZ":
		Ce.value_1x0zlez3dcfaz = 45
		return nil
	case "DK":
		Ce.value_1x0zlez3dcfaz = 46
		return nil
	case "DJ":
		Ce.value_1x0zlez3dcfaz = 47
		return nil
	case "DM":
		Ce.value_1x0zlez3dcfaz = 48
		return nil
	case "DO":
		Ce.value_1x0zlez3dcfaz = 49
		return nil
	case "EC":
		Ce.value_1x0zlez3dcfaz = 50
		return nil
	case "EG":
		Ce.value_1x0zlez3dcfaz = 51
		return nil
	case "SV":
		Ce.value_1x0zlez3dcfaz = 52
		return nil
	case "ER":
		Ce.value_1x0zlez3dcfaz = 53
		return nil
	case "EE":
		Ce.value_1x0zlez3dcfaz = 54
		return nil
	case "ET":
		Ce.value_1x0zlez3dcfaz = 55
		return nil
	case "FK":
		Ce.value_1x0zlez3dcfaz = 56
		return nil
	case "FJ":
		Ce.value_1x0zlez3dcfaz = 57
		return nil
	case "FI":
		Ce.value_1x0zlez3dcfaz = 58
		return nil
	case "FR":
		Ce.value_1x0zlez3dcfaz = 59
		return nil
	case "GF":
		Ce.value_1x0zlez3dcfaz = 60
		return nil
	case "PF":
		Ce.value_1x0zlez3dcfaz = 61
		return nil
	case "GA":
		Ce.value_1x0zlez3dcfaz = 62
		return nil
	case "GM":
		Ce.value_1x0zlez3dcfaz = 63
		return nil
	case "GE":
		Ce.value_1x0zlez3dcfaz = 64
		return nil
	case "DE":
		Ce.value_1x0zlez3dcfaz = 65
		return nil
	case "GI":
		Ce.value_1x0zlez3dcfaz = 66
		return nil
	case "GR":
		Ce.value_1x0zlez3dcfaz = 67
		return nil
	case "GL":
		Ce.value_1x0zlez3dcfaz = 68
		return nil
	case "GD":
		Ce.value_1x0zlez3dcfaz = 69
		return nil
	case "GP":
		Ce.value_1x0zlez3dcfaz = 70
		return nil
	case "GU":
		Ce.value_1x0zlez3dcfaz = 71
		return nil
	case "GT":
		Ce.value_1x0zlez3dcfaz = 72
		return nil
	case "GN":
		Ce.value_1x0zlez3dcfaz = 73
		return nil
	case "GW":
		Ce.value_1x0zlez3dcfaz = 74
		return nil
	case "GY":
		Ce.value_1x0zlez3dcfaz = 75
		return nil
	case "VA":
		Ce.value_1x0zlez3dcfaz = 76
		return nil
	case "HN":
		Ce.value_1x0zlez3dcfaz = 77
		return nil
	case "HK":
		Ce.value_1x0zlez3dcfaz = 78
		return nil
	case "HU":
		Ce.value_1x0zlez3dcfaz = 79
		return nil
	case "IS":
		Ce.value_1x0zlez3dcfaz = 80
		return nil
	case "IN":
		Ce.value_1x0zlez3dcfaz = 81
		return nil
	case "ID":
		Ce.value_1x0zlez3dcfaz = 82
		return nil
	case "IE":
		Ce.value_1x0zlez3dcfaz = 83
		return nil
	case "IL":
		Ce.value_1x0zlez3dcfaz = 84
		return nil
	case "IT":
		Ce.value_1x0zlez3dcfaz = 85
		return nil
	case "JM":
		Ce.value_1x0zlez3dcfaz = 86
		return nil
	case "JP":
		Ce.value_1x0zlez3dcfaz = 87
		return nil
	case "JO":
		Ce.value_1x0zlez3dcfaz = 88
		return nil
	case "KZ":
		Ce.value_1x0zlez3dcfaz = 89
		return nil
	case "KE":
		Ce.value_1x0zlez3dcfaz = 90
		return nil
	case "KI":
		Ce.value_1x0zlez3dcfaz = 91
		return nil
	case "KR":
		Ce.value_1x0zlez3dcfaz = 92
		return nil
	case "KW":
		Ce.value_1x0zlez3dcfaz = 93
		return nil
	case "KG":
		Ce.value_1x0zlez3dcfaz = 94
		return nil
	case "LA":
		Ce.value_1x0zlez3dcfaz = 95
		return nil
	case "LV":
		Ce.value_1x0zlez3dcfaz = 96
		return nil
	case "LS":
		Ce.value_1x0zlez3dcfaz = 97
		return nil
	case "LI":
		Ce.value_1x0zlez3dcfaz = 98
		return nil
	case "LT":
		Ce.value_1x0zlez3dcfaz = 99
		return nil
	case "LU":
		Ce.value_1x0zlez3dcfaz = 100
		return nil
	case "MG":
		Ce.value_1x0zlez3dcfaz = 101
		return nil
	case "MW":
		Ce.value_1x0zlez3dcfaz = 102
		return nil
	case "MY":
		Ce.value_1x0zlez3dcfaz = 103
		return nil
	case "MV":
		Ce.value_1x0zlez3dcfaz = 104
		return nil
	case "ML":
		Ce.value_1x0zlez3dcfaz = 105
		return nil
	case "MT":
		Ce.value_1x0zlez3dcfaz = 106
		return nil
	case "MH":
		Ce.value_1x0zlez3dcfaz = 107
		return nil
	case "MQ":
		Ce.value_1x0zlez3dcfaz = 108
		return nil
	case "MR":
		Ce.value_1x0zlez3dcfaz = 109
		return nil
	case "MU":
		Ce.value_1x0zlez3dcfaz = 110
		return nil
	case "YT":
		Ce.value_1x0zlez3dcfaz = 111
		return nil
	case "MX":
		Ce.value_1x0zlez3dcfaz = 112
		return nil
	case "FM":
		Ce.value_1x0zlez3dcfaz = 113
		return nil
	case "MN":
		Ce.value_1x0zlez3dcfaz = 114
		return nil
	case "MS":
		Ce.value_1x0zlez3dcfaz = 115
		return nil
	case "MA":
		Ce.value_1x0zlez3dcfaz = 116
		return nil
	case "MZ":
		Ce.value_1x0zlez3dcfaz = 117
		return nil
	case "NA":
		Ce.value_1x0zlez3dcfaz = 118
		return nil
	case "NR":
		Ce.value_1x0zlez3dcfaz = 119
		return nil
	case "NP":
		Ce.value_1x0zlez3dcfaz = 120
		return nil
	case "NL":
		Ce.value_1x0zlez3dcfaz = 121
		return nil
	case "AN":
		Ce.value_1x0zlez3dcfaz = 122
		return nil
	case "NC":
		Ce.value_1x0zlez3dcfaz = 123
		return nil
	case "NZ":
		Ce.value_1x0zlez3dcfaz = 124
		return nil
	case "NI":
		Ce.value_1x0zlez3dcfaz = 125
		return nil
	case "NE":
		Ce.value_1x0zlez3dcfaz = 126
		return nil
	case "NU":
		Ce.value_1x0zlez3dcfaz = 127
		return nil
	case "NF":
		Ce.value_1x0zlez3dcfaz = 128
		return nil
	case "NO":
		Ce.value_1x0zlez3dcfaz = 129
		return nil
	case "OM":
		Ce.value_1x0zlez3dcfaz = 130
		return nil
	case "PW":
		Ce.value_1x0zlez3dcfaz = 131
		return nil
	case "PA":
		Ce.value_1x0zlez3dcfaz = 132
		return nil
	case "PG":
		Ce.value_1x0zlez3dcfaz = 133
		return nil
	case "PE":
		Ce.value_1x0zlez3dcfaz = 134
		return nil
	case "PH":
		Ce.value_1x0zlez3dcfaz = 135
		return nil
	case "PN":
		Ce.value_1x0zlez3dcfaz = 136
		return nil
	case "PL":
		Ce.value_1x0zlez3dcfaz = 137
		return nil
	case "PT":
		Ce.value_1x0zlez3dcfaz = 138
		return nil
	case "QA":
		Ce.value_1x0zlez3dcfaz = 139
		return nil
	case "RE":
		Ce.value_1x0zlez3dcfaz = 140
		return nil
	case "RO":
		Ce.value_1x0zlez3dcfaz = 141
		return nil
	case "RU":
		Ce.value_1x0zlez3dcfaz = 142
		return nil
	case "RW":
		Ce.value_1x0zlez3dcfaz = 143
		return nil
	case "SH":
		Ce.value_1x0zlez3dcfaz = 144
		return nil
	case "KN":
		Ce.value_1x0zlez3dcfaz = 145
		return nil
	case "LC":
		Ce.value_1x0zlez3dcfaz = 146
		return nil
	case "PM":
		Ce.value_1x0zlez3dcfaz = 147
		return nil
	case "VC":
		Ce.value_1x0zlez3dcfaz = 148
		return nil
	case "WS":
		Ce.value_1x0zlez3dcfaz = 149
		return nil
	case "SM":
		Ce.value_1x0zlez3dcfaz = 150
		return nil
	case "ST":
		Ce.value_1x0zlez3dcfaz = 151
		return nil
	case "SA":
		Ce.value_1x0zlez3dcfaz = 152
		return nil
	case "SN":
		Ce.value_1x0zlez3dcfaz = 153
		return nil
	case "RS":
		Ce.value_1x0zlez3dcfaz = 154
		return nil
	case "SC":
		Ce.value_1x0zlez3dcfaz = 155
		return nil
	case "SL":
		Ce.value_1x0zlez3dcfaz = 156
		return nil
	case "SG":
		Ce.value_1x0zlez3dcfaz = 157
		return nil
	case "SK":
		Ce.value_1x0zlez3dcfaz = 158
		return nil
	case "SI":
		Ce.value_1x0zlez3dcfaz = 159
		return nil
	case "SB":
		Ce.value_1x0zlez3dcfaz = 160
		return nil
	case "SO":
		Ce.value_1x0zlez3dcfaz = 161
		return nil
	case "ZA":
		Ce.value_1x0zlez3dcfaz = 162
		return nil
	case "ES":
		Ce.value_1x0zlez3dcfaz = 163
		return nil
	case "LK":
		Ce.value_1x0zlez3dcfaz = 164
		return nil
	case "SR":
		Ce.value_1x0zlez3dcfaz = 165
		return nil
	case "SJ":
		Ce.value_1x0zlez3dcfaz = 166
		return nil
	case "SZ":
		Ce.value_1x0zlez3dcfaz = 167
		return nil
	case "SE":
		Ce.value_1x0zlez3dcfaz = 168
		return nil
	case "CH":
		Ce.value_1x0zlez3dcfaz = 169
		return nil
	case "TW":
		Ce.value_1x0zlez3dcfaz = 170
		return nil
	case "TJ":
		Ce.value_1x0zlez3dcfaz = 171
		return nil
	case "TZ":
		Ce.value_1x0zlez3dcfaz = 172
		return nil
	case "TH":
		Ce.value_1x0zlez3dcfaz = 173
		return nil
	case "TG":
		Ce.value_1x0zlez3dcfaz = 174
		return nil
	case "TO":
		Ce.value_1x0zlez3dcfaz = 175
		return nil
	case "TT":
		Ce.value_1x0zlez3dcfaz = 176
		return nil
	case "TN":
		Ce.value_1x0zlez3dcfaz = 177
		return nil
	case "TR":
		Ce.value_1x0zlez3dcfaz = 178
		return nil
	case "TM":
		Ce.value_1x0zlez3dcfaz = 179
		return nil
	case "TC":
		Ce.value_1x0zlez3dcfaz = 180
		return nil
	case "TV":
		Ce.value_1x0zlez3dcfaz = 181
		return nil
	case "UG":
		Ce.value_1x0zlez3dcfaz = 182
		return nil
	case "UA":
		Ce.value_1x0zlez3dcfaz = 183
		return nil
	case "AE":
		Ce.value_1x0zlez3dcfaz = 184
		return nil
	case "GB":
		Ce.value_1x0zlez3dcfaz = 185
		return nil
	case "US":
		Ce.value_1x0zlez3dcfaz = 186
		return nil
	case "UY":
		Ce.value_1x0zlez3dcfaz = 187
		return nil
	case "VU":
		Ce.value_1x0zlez3dcfaz = 188
		return nil
	case "VE":
		Ce.value_1x0zlez3dcfaz = 189
		return nil
	case "VN":
		Ce.value_1x0zlez3dcfaz = 190
		return nil
	case "VG":
		Ce.value_1x0zlez3dcfaz = 191
		return nil
	case "WF":
		Ce.value_1x0zlez3dcfaz = 192
		return nil
	case "YE":
		Ce.value_1x0zlez3dcfaz = 193
		return nil
	case "ZM":
		Ce.value_1x0zlez3dcfaz = 194
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling CountryCodeEnum\n", s)
	}

	return nil
}

/*****************************

StateCodeEnum

******************************/

type StateCodeEnum struct{ value_zr7skwcicbx0 uint8 }

var StateCode = struct {
	AL StateCodeEnum
	AK StateCodeEnum
	AZ StateCodeEnum
	AR StateCodeEnum
	CA StateCodeEnum
	CO StateCodeEnum
	CT StateCodeEnum
	DE StateCodeEnum
	FL StateCodeEnum
	GA StateCodeEnum
	HI StateCodeEnum
	ID StateCodeEnum
	IL StateCodeEnum
	IN StateCodeEnum
	IA StateCodeEnum
	KS StateCodeEnum
	KY StateCodeEnum
	LA StateCodeEnum
	ME StateCodeEnum
	MD StateCodeEnum
	MA StateCodeEnum
	MI StateCodeEnum
	MN StateCodeEnum
	MS StateCodeEnum
	MO StateCodeEnum
	MT StateCodeEnum
	NE StateCodeEnum
	NV StateCodeEnum
	NH StateCodeEnum
	NJ StateCodeEnum
	NM StateCodeEnum
	NY StateCodeEnum
	NC StateCodeEnum
	ND StateCodeEnum
	OH StateCodeEnum
	OK StateCodeEnum
	OR StateCodeEnum
	PA StateCodeEnum
	RI StateCodeEnum
	SC StateCodeEnum
	SD StateCodeEnum
	TN StateCodeEnum
	TX StateCodeEnum
	UT StateCodeEnum
	VT StateCodeEnum
	VA StateCodeEnum
	WA StateCodeEnum
	WV StateCodeEnum
	WI StateCodeEnum
	WY StateCodeEnum
	AS StateCodeEnum
	DC StateCodeEnum
	FM StateCodeEnum
	GU StateCodeEnum
	MH StateCodeEnum
	MP StateCodeEnum
	PW StateCodeEnum
	PR StateCodeEnum

	// Used to iterate in range loops
	Values [58]StateCodeEnum
}{
	AL: StateCodeEnum{value_zr7skwcicbx0: 1},
	AK: StateCodeEnum{value_zr7skwcicbx0: 2},
	AZ: StateCodeEnum{value_zr7skwcicbx0: 3},
	AR: StateCodeEnum{value_zr7skwcicbx0: 4},
	CA: StateCodeEnum{value_zr7skwcicbx0: 5},
	CO: StateCodeEnum{value_zr7skwcicbx0: 6},
	CT: StateCodeEnum{value_zr7skwcicbx0: 7},
	DE: StateCodeEnum{value_zr7skwcicbx0: 8},
	FL: StateCodeEnum{value_zr7skwcicbx0: 9},
	GA: StateCodeEnum{value_zr7skwcicbx0: 10},
	HI: StateCodeEnum{value_zr7skwcicbx0: 11},
	ID: StateCodeEnum{value_zr7skwcicbx0: 12},
	IL: StateCodeEnum{value_zr7skwcicbx0: 13},
	IN: StateCodeEnum{value_zr7skwcicbx0: 14},
	IA: StateCodeEnum{value_zr7skwcicbx0: 15},
	KS: StateCodeEnum{value_zr7skwcicbx0: 16},
	KY: StateCodeEnum{value_zr7skwcicbx0: 17},
	LA: StateCodeEnum{value_zr7skwcicbx0: 18},
	ME: StateCodeEnum{value_zr7skwcicbx0: 19},
	MD: StateCodeEnum{value_zr7skwcicbx0: 20},
	MA: StateCodeEnum{value_zr7skwcicbx0: 21},
	MI: StateCodeEnum{value_zr7skwcicbx0: 22},
	MN: StateCodeEnum{value_zr7skwcicbx0: 23},
	MS: StateCodeEnum{value_zr7skwcicbx0: 24},
	MO: StateCodeEnum{value_zr7skwcicbx0: 25},
	MT: StateCodeEnum{value_zr7skwcicbx0: 26},
	NE: StateCodeEnum{value_zr7skwcicbx0: 27},
	NV: StateCodeEnum{value_zr7skwcicbx0: 28},
	NH: StateCodeEnum{value_zr7skwcicbx0: 29},
	NJ: StateCodeEnum{value_zr7skwcicbx0: 30},
	NM: StateCodeEnum{value_zr7skwcicbx0: 31},
	NY: StateCodeEnum{value_zr7skwcicbx0: 32},
	NC: StateCodeEnum{value_zr7skwcicbx0: 33},
	ND: StateCodeEnum{value_zr7skwcicbx0: 34},
	OH: StateCodeEnum{value_zr7skwcicbx0: 35},
	OK: StateCodeEnum{value_zr7skwcicbx0: 36},
	OR: StateCodeEnum{value_zr7skwcicbx0: 37},
	PA: StateCodeEnum{value_zr7skwcicbx0: 38},
	RI: StateCodeEnum{value_zr7skwcicbx0: 39},
	SC: StateCodeEnum{value_zr7skwcicbx0: 40},
	SD: StateCodeEnum{value_zr7skwcicbx0: 41},
	TN: StateCodeEnum{value_zr7skwcicbx0: 42},
	TX: StateCodeEnum{value_zr7skwcicbx0: 43},
	UT: StateCodeEnum{value_zr7skwcicbx0: 44},
	VT: StateCodeEnum{value_zr7skwcicbx0: 45},
	VA: StateCodeEnum{value_zr7skwcicbx0: 46},
	WA: StateCodeEnum{value_zr7skwcicbx0: 47},
	WV: StateCodeEnum{value_zr7skwcicbx0: 48},
	WI: StateCodeEnum{value_zr7skwcicbx0: 49},
	WY: StateCodeEnum{value_zr7skwcicbx0: 50},
	AS: StateCodeEnum{value_zr7skwcicbx0: 51},
	DC: StateCodeEnum{value_zr7skwcicbx0: 52},
	FM: StateCodeEnum{value_zr7skwcicbx0: 53},
	GU: StateCodeEnum{value_zr7skwcicbx0: 54},
	MH: StateCodeEnum{value_zr7skwcicbx0: 55},
	MP: StateCodeEnum{value_zr7skwcicbx0: 56},
	PW: StateCodeEnum{value_zr7skwcicbx0: 57},
	PR: StateCodeEnum{value_zr7skwcicbx0: 58},
}

func init() {
	StateCode.Values = [58]StateCodeEnum{
		StateCode.AL, StateCode.AK, StateCode.AZ, StateCode.AR, StateCode.CA, StateCode.CO, StateCode.CT, StateCode.DE, StateCode.FL, StateCode.GA, StateCode.HI, StateCode.ID, StateCode.IL, StateCode.IN, StateCode.IA, StateCode.KS, StateCode.KY, StateCode.LA, StateCode.ME, StateCode.MD, StateCode.MA, StateCode.MI, StateCode.MN, StateCode.MS, StateCode.MO, StateCode.MT, StateCode.NE, StateCode.NV, StateCode.NH, StateCode.NJ, StateCode.NM, StateCode.NY, StateCode.NC, StateCode.ND, StateCode.OH, StateCode.OK, StateCode.OR, StateCode.PA, StateCode.RI, StateCode.SC, StateCode.SD, StateCode.TN, StateCode.TX, StateCode.UT, StateCode.VT, StateCode.VA, StateCode.WA, StateCode.WV, StateCode.WI, StateCode.WY, StateCode.AS, StateCode.DC, StateCode.FM, StateCode.GU, StateCode.MH, StateCode.MP, StateCode.PW, StateCode.PR,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Se StateCodeEnum) Value() uint8 {
	return Se.value_zr7skwcicbx0
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Se StateCodeEnum) IntValue() int {
	return int(Se.value_zr7skwcicbx0)
}

// Name returns the name of the variant as a string.
func (Se StateCodeEnum) Name() string {
	switch Se.value_zr7skwcicbx0 {
	case 1:
		return "AL"
	case 2:
		return "AK"
	case 3:
		return "AZ"
	case 4:
		return "AR"
	case 5:
		return "CA"
	case 6:
		return "CO"
	case 7:
		return "CT"
	case 8:
		return "DE"
	case 9:
		return "FL"
	case 10:
		return "GA"
	case 11:
		return "HI"
	case 12:
		return "ID"
	case 13:
		return "IL"
	case 14:
		return "IN"
	case 15:
		return "IA"
	case 16:
		return "KS"
	case 17:
		return "KY"
	case 18:
		return "LA"
	case 19:
		return "ME"
	case 20:
		return "MD"
	case 21:
		return "MA"
	case 22:
		return "MI"
	case 23:
		return "MN"
	case 24:
		return "MS"
	case 25:
		return "MO"
	case 26:
		return "MT"
	case 27:
		return "NE"
	case 28:
		return "NV"
	case 29:
		return "NH"
	case 30:
		return "NJ"
	case 31:
		return "NM"
	case 32:
		return "NY"
	case 33:
		return "NC"
	case 34:
		return "ND"
	case 35:
		return "OH"
	case 36:
		return "OK"
	case 37:
		return "OR"
	case 38:
		return "PA"
	case 39:
		return "RI"
	case 40:
		return "SC"
	case 41:
		return "SD"
	case 42:
		return "TN"
	case 43:
		return "TX"
	case 44:
		return "UT"
	case 45:
		return "VT"
	case 46:
		return "VA"
	case 47:
		return "WA"
	case 48:
		return "WV"
	case 49:
		return "WI"
	case 50:
		return "WY"
	case 51:
		return "AS"
	case 52:
		return "DC"
	case 53:
		return "FM"
	case 54:
		return "GU"
	case 55:
		return "MH"
	case 56:
		return "MP"
	case 57:
		return "PW"
	case 58:
		return "PR"
	}

	return ""
}

// Type returns the variant's type name as a string
func (Se StateCodeEnum) Type() string {
	return "StateCodeEnum"
}

// Namespace returns the variant's namespace name as a string
func (Se StateCodeEnum) Namespace() string {
	return "StateCode"
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Se StateCodeEnum) String() string {
	switch Se.value_zr7skwcicbx0 {
	case 1:
		return "AL"
	case 2:
		return "AK"
	case 3:
		return "AZ"
	case 4:
		return "AR"
	case 5:
		return "CA"
	case 6:
		return "CO"
	case 7:
		return "CT"
	case 8:
		return "DE"
	case 9:
		return "FL"
	case 10:
		return "GA"
	case 11:
		return "HI"
	case 12:
		return "ID"
	case 13:
		return "IL"
	case 14:
		return "IN"
	case 15:
		return "IA"
	case 16:
		return "KS"
	case 17:
		return "KY"
	case 18:
		return "LA"
	case 19:
		return "ME"
	case 20:
		return "MD"
	case 21:
		return "MA"
	case 22:
		return "MI"
	case 23:
		return "MN"
	case 24:
		return "MS"
	case 25:
		return "MO"
	case 26:
		return "MT"
	case 27:
		return "NE"
	case 28:
		return "NV"
	case 29:
		return "NH"
	case 30:
		return "NJ"
	case 31:
		return "NM"
	case 32:
		return "NY"
	case 33:
		return "NC"
	case 34:
		return "ND"
	case 35:
		return "OH"
	case 36:
		return "OK"
	case 37:
		return "OR"
	case 38:
		return "PA"
	case 39:
		return "RI"
	case 40:
		return "SC"
	case 41:
		return "SD"
	case 42:
		return "TN"
	case 43:
		return "TX"
	case 44:
		return "UT"
	case 45:
		return "VT"
	case 46:
		return "VA"
	case 47:
		return "WA"
	case 48:
		return "WV"
	case 49:
		return "WI"
	case 50:
		return "WY"
	case 51:
		return "AS"
	case 52:
		return "DC"
	case 53:
		return "FM"
	case 54:
		return "GU"
	case 55:
		return "MH"
	case 56:
		return "MP"
	case 57:
		return "PW"
	case 58:
		return "PR"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Se StateCodeEnum) Description() string {
	switch Se.value_zr7skwcicbx0 {
	case 1:
		return "Alabama"
	case 2:
		return "Alaska"
	case 3:
		return "Arizona"
	case 4:
		return "Arkansas"
	case 5:
		return "California"
	case 6:
		return "Colorado"
	case 7:
		return "Connecticut"
	case 8:
		return "Delaware"
	case 9:
		return "Florida"
	case 10:
		return "Georgia"
	case 11:
		return "Hawaii"
	case 12:
		return "Idaho"
	case 13:
		return "Illinois"
	case 14:
		return "Indiana"
	case 15:
		return "Iowa"
	case 16:
		return "Kansas"
	case 17:
		return "Kentucky"
	case 18:
		return "Louisiana"
	case 19:
		return "Maine"
	case 20:
		return "Maryland"
	case 21:
		return "Massachusetts"
	case 22:
		return "Michigan"
	case 23:
		return "Minnesota"
	case 24:
		return "Mississippi"
	case 25:
		return "Missouri"
	case 26:
		return "Montana"
	case 27:
		return "Nebraska"
	case 28:
		return "Nevada"
	case 29:
		return "New Hampshire"
	case 30:
		return "New Jersey"
	case 31:
		return "New Mexico"
	case 32:
		return "New York"
	case 33:
		return "North Carolina"
	case 34:
		return "North Dakota"
	case 35:
		return "Ohio"
	case 36:
		return "Oklahoma"
	case 37:
		return "Oregon"
	case 38:
		return "Pennsylvania"
	case 39:
		return "Rhode Island"
	case 40:
		return "South Carolina"
	case 41:
		return "South Dakota"
	case 42:
		return "Tennessee"
	case 43:
		return "Texas"
	case 44:
		return "Utah"
	case 45:
		return "Vermont"
	case 46:
		return "Virginia"
	case 47:
		return "Washington"
	case 48:
		return "West Virginia"
	case 49:
		return "Wisconsin"
	case 50:
		return "Wyoming"
	case 51:
		return "American Samoa"
	case 52:
		return "District of Columbia"
	case 53:
		return "Federated States of Micronesia"
	case 54:
		return "Guam"
	case 55:
		return "Marshall Islands"
	case 56:
		return "Northern Mariana Islands"
	case 57:
		return "Palau"
	case 58:
		return "Puerto Rico"
	}
	return ""
}

// JSON marshaling methods
func (Se StateCodeEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Se.String())), nil
}

func (Se *StateCodeEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "AL":
		Se.value_zr7skwcicbx0 = 1
		return nil
	case "AK":
		Se.value_zr7skwcicbx0 = 2
		return nil
	case "AZ":
		Se.value_zr7skwcicbx0 = 3
		return nil
	case "AR":
		Se.value_zr7skwcicbx0 = 4
		return nil
	case "CA":
		Se.value_zr7skwcicbx0 = 5
		return nil
	case "CO":
		Se.value_zr7skwcicbx0 = 6
		return nil
	case "CT":
		Se.value_zr7skwcicbx0 = 7
		return nil
	case "DE":
		Se.value_zr7skwcicbx0 = 8
		return nil
	case "FL":
		Se.value_zr7skwcicbx0 = 9
		return nil
	case "GA":
		Se.value_zr7skwcicbx0 = 10
		return nil
	case "HI":
		Se.value_zr7skwcicbx0 = 11
		return nil
	case "ID":
		Se.value_zr7skwcicbx0 = 12
		return nil
	case "IL":
		Se.value_zr7skwcicbx0 = 13
		return nil
	case "IN":
		Se.value_zr7skwcicbx0 = 14
		return nil
	case "IA":
		Se.value_zr7skwcicbx0 = 15
		return nil
	case "KS":
		Se.value_zr7skwcicbx0 = 16
		return nil
	case "KY":
		Se.value_zr7skwcicbx0 = 17
		return nil
	case "LA":
		Se.value_zr7skwcicbx0 = 18
		return nil
	case "ME":
		Se.value_zr7skwcicbx0 = 19
		return nil
	case "MD":
		Se.value_zr7skwcicbx0 = 20
		return nil
	case "MA":
		Se.value_zr7skwcicbx0 = 21
		return nil
	case "MI":
		Se.value_zr7skwcicbx0 = 22
		return nil
	case "MN":
		Se.value_zr7skwcicbx0 = 23
		return nil
	case "MS":
		Se.value_zr7skwcicbx0 = 24
		return nil
	case "MO":
		Se.value_zr7skwcicbx0 = 25
		return nil
	case "MT":
		Se.value_zr7skwcicbx0 = 26
		return nil
	case "NE":
		Se.value_zr7skwcicbx0 = 27
		return nil
	case "NV":
		Se.value_zr7skwcicbx0 = 28
		return nil
	case "NH":
		Se.value_zr7skwcicbx0 = 29
		return nil
	case "NJ":
		Se.value_zr7skwcicbx0 = 30
		return nil
	case "NM":
		Se.value_zr7skwcicbx0 = 31
		return nil
	case "NY":
		Se.value_zr7skwcicbx0 = 32
		return nil
	case "NC":
		Se.value_zr7skwcicbx0 = 33
		return nil
	case "ND":
		Se.value_zr7skwcicbx0 = 34
		return nil
	case "OH":
		Se.value_zr7skwcicbx0 = 35
		return nil
	case "OK":
		Se.value_zr7skwcicbx0 = 36
		return nil
	case "OR":
		Se.value_zr7skwcicbx0 = 37
		return nil
	case "PA":
		Se.value_zr7skwcicbx0 = 38
		return nil
	case "RI":
		Se.value_zr7skwcicbx0 = 39
		return nil
	case "SC":
		Se.value_zr7skwcicbx0 = 40
		return nil
	case "SD":
		Se.value_zr7skwcicbx0 = 41
		return nil
	case "TN":
		Se.value_zr7skwcicbx0 = 42
		return nil
	case "TX":
		Se.value_zr7skwcicbx0 = 43
		return nil
	case "UT":
		Se.value_zr7skwcicbx0 = 44
		return nil
	case "VT":
		Se.value_zr7skwcicbx0 = 45
		return nil
	case "VA":
		Se.value_zr7skwcicbx0 = 46
		return nil
	case "WA":
		Se.value_zr7skwcicbx0 = 47
		return nil
	case "WV":
		Se.value_zr7skwcicbx0 = 48
		return nil
	case "WI":
		Se.value_zr7skwcicbx0 = 49
		return nil
	case "WY":
		Se.value_zr7skwcicbx0 = 50
		return nil
	case "AS":
		Se.value_zr7skwcicbx0 = 51
		return nil
	case "DC":
		Se.value_zr7skwcicbx0 = 52
		return nil
	case "FM":
		Se.value_zr7skwcicbx0 = 53
		return nil
	case "GU":
		Se.value_zr7skwcicbx0 = 54
		return nil
	case "MH":
		Se.value_zr7skwcicbx0 = 55
		return nil
	case "MP":
		Se.value_zr7skwcicbx0 = 56
		return nil
	case "PW":
		Se.value_zr7skwcicbx0 = 57
		return nil
	case "PR":
		Se.value_zr7skwcicbx0 = 58
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling StateCodeEnum\n", s)
	}

	return nil
}
