/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package gopal

import (
	"encoding/json"
)

/*****************************

paypalPayer struct

******************************/
func NewPaypalPayer() *paypalPayer {
	return &paypalPayer{
		private: private_1ntcpkal8ou9z{},
	}
}

// Source of the funds for this payment represented by a PayPal account.
type paypalPayer struct {
	private private_1ntcpkal8ou9z
}

type private_1ntcpkal8ou9z struct {
	// Must be PaymentMethod.Paypal
	PaymentMethod PaymentMethodEnum `json:"payment_method,omitempty"`
	// Status of the payer’s PayPal account. Allowed values: VERIFIED or UNVERIFIED.
	Status          payerStatusEnum  `json:"status,omitempty"`
	PaypalPayerInfo *PaypalPayerInfo `json:"payer_info,omitempty"`
}

type json_1ntcpkal8ou9z struct {
	*private_1ntcpkal8ou9z
}

func (self *paypalPayer) Status() payerStatusEnum {
	return self.private.Status
}

func (self *paypalPayer) PaypalPayerInfo() *PaypalPayerInfo {
	return self.private.PaypalPayerInfo
}

func (self *paypalPayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1ntcpkal8ou9z{
		&self.private,
	})
}

func (self *paypalPayer) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "payment_method":
			err = json.Unmarshal(rawMsg, &self.private.PaymentMethod)
		case "status":
			err = json.Unmarshal(rawMsg, &self.private.Status)
		case "payer_info":
			err = json.Unmarshal(rawMsg, &self.private.PaypalPayerInfo)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}

/*****************************

PaypalPayerInfo struct

******************************/
func NewPaypalPayerInfo() *PaypalPayerInfo {
	return &PaypalPayerInfo{
		private: private_9f5ft1kybt8n{},
	}
}

// This object is pre-filled by PayPal when the payment_method is paypal.
type PaypalPayerInfo struct {
	private private_9f5ft1kybt8n
	// Email address representing the payer. 127 characters max.
	Email string `json:"email,omitempty"`
	// Salutation of the payer.
	Salutation string `json:"salutation,omitempty"`
	// Suffix of the payer.
	Suffix string `json:"suffix,omitempty"`
	// Two-letter registered country code of the payer to identify the buyer country.
	CountryCode CountryCodeEnum `json:"country_code,omitempty"`
	// Phone number representing the payer. 20 characters max.
	Phone string `json:"phone,omitempty"`
	// Payer’s tax ID type. Allowed values: BR_CPF or BR_CNPJ. Only supported when
	// the payment_method is set to paypal.
	TaxIdType TaxIdTypeEnum `json:"tax_id_type,omitempty"`
	// Payer’s tax ID. Only supported when the payment_method is set to paypal.
	TaxId string `json:"tax_id,omitempty"`
}

type private_9f5ft1kybt8n struct {
	// First name of the payer. Value assigned by PayPal.
	FirstName string `json:"first_name,omitempty"`
	// Middle name of the payer. Value assigned by PayPal.
	MiddleName string `json:"middle_name,omitempty"`
	// Last name of the payer. Value assigned by PayPal.
	LastName string `json:"last_name,omitempty"`
	// PayPal assigned Payer ID. Value assigned by PayPal.
	PayerId string `json:"payer_id,omitempty"`
	// Shipping address of payer PayPal account. Value assigned by PayPal.
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

type json_9f5ft1kybt8n struct {
	*private_9f5ft1kybt8n
	Email       string          `json:"email,omitempty"`
	Salutation  string          `json:"salutation,omitempty"`
	Suffix      string          `json:"suffix,omitempty"`
	CountryCode CountryCodeEnum `json:"country_code,omitempty"`
	Phone       string          `json:"phone,omitempty"`
	TaxIdType   TaxIdTypeEnum   `json:"tax_id_type,omitempty"`
	TaxId       string          `json:"tax_id,omitempty"`
}

func (self *PaypalPayerInfo) FirstName() string {
	return self.private.FirstName
}

func (self *PaypalPayerInfo) MiddleName() string {
	return self.private.MiddleName
}

func (self *PaypalPayerInfo) LastName() string {
	return self.private.LastName
}

func (self *PaypalPayerInfo) PayerId() string {
	return self.private.PayerId
}

func (self *PaypalPayerInfo) ShippingAddress() *ShippingAddress {
	return self.private.ShippingAddress
}

func (self *PaypalPayerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_9f5ft1kybt8n{
		&self.private,
		self.Email,
		self.Salutation,
		self.Suffix,
		self.CountryCode,
		self.Phone,
		self.TaxIdType,
		self.TaxId,
	})
}

func (self *PaypalPayerInfo) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key {
		case "email":
			err = json.Unmarshal(rawMsg, &self.Email)
		case "salutation":
			err = json.Unmarshal(rawMsg, &self.Salutation)
		case "suffix":
			err = json.Unmarshal(rawMsg, &self.Suffix)
		case "country_code":
			err = json.Unmarshal(rawMsg, &self.CountryCode)
		case "phone":
			err = json.Unmarshal(rawMsg, &self.Phone)
		case "tax_id_type":
			err = json.Unmarshal(rawMsg, &self.TaxIdType)
		case "tax_id":
			err = json.Unmarshal(rawMsg, &self.TaxId)
		case "first_name":
			err = json.Unmarshal(rawMsg, &self.private.FirstName)
		case "middle_name":
			err = json.Unmarshal(rawMsg, &self.private.MiddleName)
		case "last_name":
			err = json.Unmarshal(rawMsg, &self.private.LastName)
		case "payer_id":
			err = json.Unmarshal(rawMsg, &self.private.PayerId)
		case "shipping_address":
			err = json.Unmarshal(rawMsg, &self.private.ShippingAddress)
		default:
			// Ignoring unknown property
		}

		if err != nil {
			return err
		}
	}
	return nil
}
